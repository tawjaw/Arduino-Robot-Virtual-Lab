{"version":3,"sources":["../node_modules/matter-js/build/matter.js","robots/utils/raycast_es6.ts","robots/utils/utils.ts","robots/utils/CustomBodies.ts","robots/TwoWheelRobot.ts","../node_modules/avr8js/dist/esm/cpu/cpu.js","../node_modules/avr8js/dist/esm/cpu/instruction.js","../node_modules/avr8js/dist/esm/cpu/interrupt.js","../node_modules/avr8js/dist/esm/peripherals/timer.js","../node_modules/avr8js/dist/esm/peripherals/gpio.js","../node_modules/avr8js/dist/esm/peripherals/usart.js","../node_modules/avr8js/dist/esm/peripherals/twi.js","../node_modules/avr8js/dist/esm/index.js","Hardware/Uno/intelhex.ts","Hardware/Uno/task-scheduler.ts","Hardware/Uno/execute.ts","Hardware/Uno/cpu-performance.ts","Hardware/Uno/format-time.ts","Hardware/Uno/ArduinoUno.ts","Hardware/Component.ts","Hardware/Servo.ts","Hardware/UltrasonicSensor.ts","Hardware/index.ts","ArduinoRobotEnvironment/TwoServoRobot.ts","compile.ts","index.ts","../node_modules/parcel-bundler/src/builtins/bundle-url.js","../node_modules/parcel-bundler/src/builtins/css-loader.js","../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["registerSpace","CPU","progMem","sramBytes","data","Uint8Array","data16","Uint16Array","buffer","dataView","DataView","progBytes","readHooks","writeHooks","pc22Bits","length","pc","cycles","reset","fill","SP","addr","value","hook","getUint16","setUint16","SREG","isTwoWordInstruction","opcode","avrInstruction","cpu","d","r","sum","R","sreg","b","k","ret","sp","A","readData","writeData","val1","val2","arg1","arg2","nextOpcode","skipSize","retAddr","eind","rampz","i","v1","v2","getInt8","setInt16","clear","set","x","y","z","r2","d2","target","a","l","avrInterrupt","timer01Dividers","TOV","OCFA","OCFB","TOIE","OCIEA","OCIEB","timer0Config","bits","captureInterrupt","compAInterrupt","compBInterrupt","ovfInterrupt","TIFR","OCRA","OCRB","ICR","TCNT","TCCRA","TCCRB","TCCRC","TIMSK","dividers","timer1Config","timer2Config","TimerMode","TOVUpdateMode","OCRUpdateMode","TopOCRA","TopICR","wgmModes8Bit","Normal","Immediate","Max","PWMPhaseCorrect","Top","Bottom","CTC","FastPWM","Reserved","wgmModes16Bit","PWMPhaseFrequencyCorrect","AVRTimer","config","lastCycle","ocrA","ocrB","tcnt","tcntUpdated","updateWGMConfig","tick","highByte","timerUpdated","registerHook","address","wgmModes","WGM","timerMode","topValue","divider","CS","delta","counterDelta","Math","floor","val","newVal","TOP","interruptsEnabled","mask","portAConfig","PIN","DDR","PORT","portBConfig","portCConfig","portDConfig","portEConfig","portFConfig","portGConfig","portHConfig","portJConfig","portKConfig","portLConfig","PinState","AVRIOPort","portConfig","listeners","oldValue","portValue","writeGpio","ddrMask","oldPortValue","listener","push","filter","index","ddr","port","bitMask","High","Low","InputPullUp","Input","usart0Config","rxCompleteInterrupt","dataRegisterEmptyInterrupt","txCompleteInterrupt","UCSRA","UCSRB","UCSRC","UBRRL","UBRRH","UDR","UCSRA_RXC","UCSRA_TXC","UCSRA_UDRE","UCSRA_FE","UCSRA_DOR","UCSRA_UPE","UCSRA_U2X","UCSRA_MPCM","UCSRB_RXCIE","UCSRB_TXCIE","UCSRB_UDRIE","UCSRB_RXEN","UCSRB_TXEN","UCSRB_UCSZ2","UCSRB_RXB8","UCSRB_TXB8","UCSRC_UMSEL1","UCSRC_UMSEL0","UCSRC_UPM1","UCSRC_UPM0","UCSRC_USBS","UCSRC_UCSZ1","UCSRC_UCSZ0","UCSRC_UCPOL","AVRUSART","freqMHz","onByteTransmit","onLineTransmit","lineBuffer","ch","String","fromCharCode","ucsra","ucsrb","UBRR","multiplier","ucsz","TWCR_TWINT","TWCR_TWEA","TWCR_TWSTA","TWCR_TWSTO","TWCR_TWWC","TWCR_TWEN","TWCR_TWIE","TWSR_TWS_MASK","TWSR_TWPS1","TWSR_TWPS0","TWSR_TWPS_MASK","TWAR_TWA_MASK","TWAR_TWGCE","STATUS_BUS_ERROR","STATUS_TWI_IDLE","STATUS_START","STATUS_REPEATED_START","STATUS_SLAW_ACK","STATUS_SLAW_NACK","STATUS_DATA_SENT_ACK","STATUS_DATA_SENT_NACK","STATUS_DATA_LOST_ARBITRATION","STATUS_SLAR_ACK","STATUS_SLAR_NACK","STATUS_DATA_RECEIVED_ACK","STATUS_DATA_RECEIVED_NACK","twiConfig","twiInterrupt","TWBR","TWSR","TWAR","TWDR","TWCR","TWAMR","NoopTWIEventHandler","twi","completeStart","completeStop","completeConnect","completeWrite","completeRead","AVRTWI","eventHandler","nextTick","updateStatus","clearInt","status","twdrValue","start","stop","connectToSlave","writeByte","ack","readByte","Error","prescaler","bundleURL","getBundleURLCached","getBundleURL","err","matches","stack","match","getBaseURL","url","replace","exports","bundle","require","updateLink","link","newLink","cloneNode","onload","remove","href","split","Date","now","parentNode","insertBefore","nextSibling","cssTimeout","reloadCSS","setTimeout","links","document","querySelectorAll","module","OVERLAY_ID","OldModule","Module","moduleName","call","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","type","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","hmrApply","v","hmrAcceptRun","reload","close","onclose","log","removeErrorOverlay","error","message","overlay","createErrorOverlay","body","appendChild","getElementById","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","dep","Array","isArray","concat","Function","deps","cached","cache","some","cb"],"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","file":"src.77de5100.js","sourceRoot":"../src","sourcesContent":["/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n","import * as Matter from \"matter-js\";\n\n\n\n///\n///\t\t\t\tcode by Isaiah Smith\n///\t\ttechnostalgic.itch.io  |  @technostalgicGM\n///\n///\t\t\t\t\t\trepo:\n///\thttps://github.com/Technostalgic/MatterJS_Raycast.git\n///\n\n\n//raycast functionality integrated with matter.js since there \n//is no built-in method for raycasting that returns the ray's\n//intersection points\n\n//function 'raycast' - returns an array of 'raycol' objects\n//param 'bodies' - bodies to check collision with; passed \n//\tthrough 'Matter.Query.ray()'\n//param 'start' - start point of raycast\n//param 'end' - end point of raycast\n//param 'sort' - whether or not the ray collisions should be\n//\tsorted based on distance from the origin\nexport function raycast(bodies, start, end, sort = true){\n\t//convert the start & end parameters to my custom\n\t//'vec2' object type\n\tstart = vec2.fromOther(start);\n\tend = vec2.fromOther(end);\n\t\n\t//The bodies that the raycast will be tested against\n\t//are queried and stored in the variable 'query'.\n\t//This uses the built-in raycast method which takes\n\t//advantage of the broad-phase collision optomizations\n\t//instead of iterating through each body in the list\n\tvar query = Matter.Query.ray(bodies, start, end);\n\t\n\t//'cols': the array that will contain the ray \n\t//collision information\n\tvar cols = [];\n\t//'raytest': the ray object that will be tested for\n\t//collision against the bodies\n\tvar raytest = new ray(start, end);\n\t\n\t//Next, since all the bodies that the ray collides with\n\t//have already been queried, we iterate through each\n\t//one to see where the ray intersects with the body\n\t//and gather other information\n\tfor(var i = query.length - 1; i >= 0; i--){\n\t\tvar bcols = ray.bodyCollisions(raytest, query[i].body);\n\t\tfor(var k = bcols.length - 1; k >= 0; k--){\n\t\t\tcols.push(bcols[k]);\n\t\t}\n\t}\n\t\n\t//if desired, we then sort the collisions based on the\n\t//distance from the ray's start\n\tif(sort)\n\t\tcols.sort(function(a,b){\n\t\t\treturn a.point.distance(start) - b.point.distance(start);\n\t\t});\n\t\n\treturn cols;\n}\n\n\n//data type that contains information about an intersection \n//between a ray and a body\nclass raycol{\n\t//initailizes a 'raycol' object with the given data\n\t//param 'body' - stores the body that the ray has \n\t//\tcollided with\n\t//param 'point' - stores the collision point\n\t//param 'normal' - stores the normal of the edge that\n\t//\tthe ray collides with\n\t//param 'verts' - stores the vertices of the edge that\n\t//\tthe ray collides with\n\tconstructor(body, point, normal, verts){\n\t\tthis.body = body;\n\t\tthis.point = point;\n\t\tthis.normal = normal;\n\t\tthis.verts = verts;\n\t}\n}\n\n//data type that contains information and methods for a \n//ray object\nclass ray{\n\t//initializes a ray instance with the given parameters\n\t//param 'start' - the starting point of the ray\n\t//param 'end' - the ending point of the ray\n\tconstructor(start, end){\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t}\n\t\n\tyValueAt(x){\n\t\t//returns the y value on the ray at the specified x\n\t\t//slope-intercept form:\n\t\t//y = m * x + b\n\t\treturn this.offsetY + this.slope * x; \n\t} \n\txValueAt(y){\n\t\t//returns the x value on the ray at the specified y\n\t\t//slope-intercept form:\n\t\t//x = (y - b) / m\n\t\treturn (y - this.offsetY) / this.slope;\n\t}\n\t\n\tpointInBounds(point){\n\t\t//checks to see if the specified point is within\n\t\t//the ray's bounding box (inclusive)\n\t\tvar minX = Math.min(this.start.x, this.end.x);\n\t\tvar maxX = Math.max(this.start.x, this.end.x);\n\t\tvar minY = Math.min(this.start.y, this.end.y);\n\t\tvar maxY = Math.max(this.start.y, this.end.y);\n\t\treturn (\n\t\t\tpoint.x >= minX &&\n\t\t\tpoint.x <= maxX &&\n\t\t\tpoint.y >= minY &&\n\t\t\tpoint.y <= maxY );\n\t}\n\tcalculateNormal(ref){\n\t\t//calulates the normal based on a specified\n\t\t//reference point\n\t\tvar dif = this.difference;\n\t\t\n\t\t//gets the two possible normals as points that lie\n\t\t//perpendicular to the ray\n\t\tvar norm1 = dif.normalized().rotate(Math.PI / 2);\n\t\tvar norm2 = dif.normalized().rotate(Math.PI / -2);\n\t\t\n\t\t//returns the normal that is closer to the provided\n\t\t//reference point\n\t\tif(this.start.plus(norm1).distance(ref) < this.start.plus(norm2).distance(ref))\n\t\t\treturn norm1;\n\t\treturn norm2;\n\t}\n\t\n\tget difference(){\n\t\t//pretty self explanitory\n\t\treturn this.end.minus(this.start);\n\t}\n\tget slope(){\n\t\tvar dif = this.difference;\n\t\treturn dif.y / dif.x;\n\t}\t\n\tget offsetY(){\n\t\t//the y-offset at x = 0, in slope-intercept form:\n\t\t//b = y - m * x\n\t\t//offsetY = start.y - slope * start.x\n\t\treturn this.start.y - this.slope * this.start.x;\n\t}\n\tget isHorizontal(){ return compareNum(this.start.y, this.end.y); }\n\tget isVertical(){ return compareNum(this.start.x, this.end.x); }\n\t\n\tstatic intersect(rayA, rayB){\n\t\t//returns the intersection point between two rays\n\t\t//null if no intersection\n\t\t\n\t\t//conditional checks for axis aligned rays\n\t\tif(rayA.isVertical && rayB.isVertical) return null;\n\t\tif(rayA.isVertical) return new vec2(rayA.start.x, rayB.yValueAt(rayA.start.x));\n\t\tif(rayB.isVertical) return new vec2(rayB.start.x, rayA.yValueAt(rayB.start.x));\n\t\tif(compareNum(rayA.slope, rayB.slope)) return null;\n\t\tif(rayA.isHorizontal) return new vec2(rayB.xValueAt(rayA.start.y), rayA.start.y);\n\t\tif(rayB.isHorizontal) return new vec2(rayA.xValueAt(rayB.start.y), rayB.start.y);\n\t\t\n\t\t//slope intercept form:\n\t\t//y1 = m2 * x + b2; where y1 = m1 * x + b1:\n\t\t//m1 * x + b1 = m2 * x + b2:\n\t\t//x = (b2 - b1) / (m1 - m2)\n\t\tvar x = (rayB.offsetY - rayA.offsetY) / (rayA.slope - rayB.slope)\n\t\treturn new vec2(x, rayA.yValueAt(x));\n\t}\n\tstatic collisionPoint(rayA, rayB){\n\t\t//returns the collision point of two rays\n\t\t//null if no collision\n\t\tvar intersection = ray.intersect(rayA, rayB);\n\t\tif(!intersection) return null;\n\t\tif(!rayA.pointInBounds(intersection)) return null;\n\t\tif(!rayB.pointInBounds(intersection)) return null;\n\t\treturn intersection;\n\t}\n\tstatic bodyEdges(body){\n\t\t//returns all of the edges of a body in the\n\t\t//form of an array of ray objects\n\t\tvar r = [];\n\t\tfor (var i = body.parts.length - 1; i >= 0; i--){\n\t\t\tfor(var k = body.parts[i].vertices.length - 1; k >= 0; k--){\n\t\t\t\tvar k2 = k + 1;\n\t\t\t\tif(k2 >= body.parts[i].vertices.length)\n\t\t\t\t\tk2 = 0;\n\t\t\t\tvar tray = new ray(\n\t\t\t\t\tvec2.fromOther(body.parts[i].vertices[k]) , \n\t\t\t\t\tvec2.fromOther(body.parts[i].vertices[k2]) );\n\t\t\t\t\n\t\t\t\t//stores the vertices inside the edge\n\t\t\t\t//ray for future reference\n\t\t\t\ttray.verts = [\n\t\t\t\t\tbody.parts[i].vertices[k] , \n\t\t\t\t\tbody.parts[i].vertices[k2] ];\n\t\t\t\t\n\t\t\t\tr.push(tray);\n\t\t\t}\n\t\t}\n\t\treturn r;\n\t}\n\tstatic bodyCollisions(rayA, body){\n\t\t//returns all the collisions between a specified ray\n\t\t//and body in the form of an array of 'raycol' objects\n\t\tvar r = [];\n\t\t\n\t\t//gets the edge rays from the body\n\t\tvar edges = ray.bodyEdges(body);\n\t\t\n\t\t//iterates through each edge and tests for collision\n\t\t//with 'rayA'\n\t\tfor(var i = edges.length - 1; i >= 0; i--){\n\t\t\t//gets the collision point\n\t\t\tvar colpoint = ray.collisionPoint(rayA, edges[i]);\n\t\t\t\n\t\t\t//if there is no collision, then go to next edge\n\t\t\tif(!colpoint) continue;\n\t\t\t\n\t\t\t//calculates the edge's normal\n\t\t\tvar normal = edges[i].calculateNormal(rayA.start);\n\t\t\t\n\t\t\t//adds the ray collision to the return array\n\t\t\tr.push(new raycol(body, colpoint, normal, edges[i].verts));\n\t\t}\n\t\t\n\t\treturn r;\n\t}\n}\n\n//in order to avoid miscalculations due to floating point\n//errors\n//example:\n//\tvar m = 6; m -= 1; m -= 3; m += 4\n//\tnow 'm' probably equals 6.0000000008361 or something stupid\nfunction compareNum(a, b, leniency = 0.00001){\n\treturn Math.abs(b - a) <= leniency;\n}\n\n//\n//included external dependencies:\n//\n//2d vector data type; contains information and methods for\n//2-dimensional vectors\nclass vec2{\n    //initailizes a 'vec2' object with specified values\n    constructor(x = 0, y = x){\n        this.x = x;\n        this.y = y;\n    }\n   \n    normalized(magnitude = 1){\n        //returns a vector 2 with the same direction as this but\n        //with a specified magnitude\n        return this.multiply(magnitude / this.distance());\n    }\n    get inverted(){\n        //returns the opposite of this vector\n        return this.multiply(-1);\n    }\n    multiply(factor){\n        //returns this multiplied by a specified factor    \n        return new vec2(this.x * factor, this.y * factor);\n    }\n    plus(vec){\n        //returns the result of this added to another\n        //specified 'vec2' object\n        return new vec2(this.x + vec.x, this.y + vec.y);\n    }\n    minus(vec){\n        //returns the result of this subtracted by another\n        //specified 'vec2' object\n        return this.plus(vec.inverted);\n    }\n    rotate(rot){\n        //rotates the vector by the specified angle\n        var ang = this.direction;\n        var mag = this.distance();\n        ang += rot;\n        return vec2.fromAng(ang, mag)\n    }\n    toPhysVector(){\n        //converts this to a vector compatible with the\n        //matter.js physics engine\n        return Matter.Vector.create(this.x, this.y);\n    }\n   \n    get direction(){\n        //returns the angle this vector is pointing in radians\n        return Math.atan2(this.y, this.x);\n    }\n    distance(vec = new vec2()){\n        //returns the distance between this and a specified\n        //'vec2' object\n        var d = Math.sqrt(\n            Math.pow(this.x - vec.x, 2) +\n            Math.pow(this.y - vec.y, 2));\n        return d;\n    }\n   \n    clone(){\n        //returns a new instance of a 'vec2' object with the\n        //same value\n        return new vec2(this.x, this.y);\n    }\n    static fromAng(angle, magnitude = 1){\n        //returns a vector which points in the specified angle\n        //and has the specified magnitude\n        return new vec2(\n            Math.cos(angle) * magnitude,\n            Math.sin(angle) * magnitude);\n    }\n    static fromOther(vector){\n        //converts other data types that contain 'x' and 'y'\n        //properties to a 'vec2' object type\n        return new vec2(vector.x, vector.y);\n    }\n   \n    toString(){\n        return \"vector<\" + this.x + \", \" + this.y + \">\";\n    }\n}","import {raycast} from \"./raycast_es6\";\nimport {Body, Bodies, World} from \"matter-js\";\n\n  //taken from  Matter.js library \n  export function commonExtend(obj : any, deep : any, options : any) {\n    var argsStart,\n        args,\n        deepClone;\n  \n    if (typeof deep === 'boolean') {\n        argsStart = 2;\n        deepClone = deep;\n    } else {\n        argsStart = 1;\n        deepClone = true;\n    }\n  \n    for (var i = argsStart; i < arguments.length; i++) {\n        var source = arguments[i];\n  \n        if (source) {\n            for (var prop in source) {\n                if (deepClone && source[prop] && source[prop].constructor === Object) {\n                    if (!obj[prop] || obj[prop].constructor === Object) {\n                        obj[prop] = obj[prop] || {};\n                        commonExtend(obj[prop], deepClone, source[prop]);\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                } else {\n                    obj[prop] = source[prop];\n                }\n            }\n        }\n    }\n    \n    return obj;\n  };\n  \n\nexport function getTranformedPoint(position : any, angle : number, offsetx : number, offsety : number)\n{\n  const x = position.x;\n  const y = position.y;\n  //get center position wrt axis of the robot\n  const xprime = x*Math.cos(angle) + y*Math.sin(angle);\n  const yprime = -x*Math.sin(angle) + y*Math.cos(angle);\n\n  //get value of xprime - w and yprime += h in game axis\n  const w = offsetx;\n  const h = offsety;\n  return {\n    x: (xprime+w)*Math.cos(angle) - (yprime+h)*Math.sin(angle),\n    y: (yprime+h)*Math.cos(angle)+(xprime+w)*Math.sin(angle)\n  }\n\n\n}\n\n\nexport function findMinimumDistanceToObstacle(startingPosition: any,startingAngle : number, radius : number, obstacles:Array<Body>)\n{\n    let minDistance = radius + 10000;\n   \n    const numberOfRays = 45;\n\n    for(var i =0; i < numberOfRays; i+=1)\n    {\n      const endPoint = getTranformedPoint(startingPosition, startingAngle-i*Math.PI/180, 220,0);\n      //var newBody =  Bodies.circle(endPoint.x, endPoint.y, 5,{isSensor : true, label:\"test\"});\n        //World.add(engine.world, [newBody]);\n      var rays = raycast(obstacles,startingPosition, endPoint, true);\n      if(rays.length != 0)\n      {\n        const nearestPoint = rays[0].point;\n        \n        const distance = Math.sqrt((nearestPoint.x-startingPosition.x)*(nearestPoint.x-startingPosition.x)+\n                                   (nearestPoint.y-startingPosition.y)*(nearestPoint.y-startingPosition.y));\n        if(distance < minDistance)  minDistance = distance;\n      }\n    }\n\n    return minDistance;\n    \n}\n","\nimport {Vertices, Body} from \"matter-js\";\nimport {commonExtend, getTranformedPoint} from \"./utils\"\n\nexport function createPartCircle(x: number, y: number, sides: number, radius: number, angleOffset:number, options: any) {\n    options = options || {};\n  \n    var path = '';\n    path +=  x.toFixed(3) + ' ' + y.toFixed(3) + ' '\n    var offset = -Math.PI/(6*sides);\n    for(var i = 0; i < sides; i += 1)\n    {\n      var angle = angleOffset+ i*offset;\n      const newPoint = getTranformedPoint({x:x, y:y}, angle, radius, 0);\n      path += newPoint.x.toFixed(3) + ' ' + newPoint.y.toFixed(3) + ' ';\n    }\n  \n    var polygon = { \n        label: 'Polygon Body',\n        position: { x: x, y: y },\n        vertices: Vertices.fromPath(path)\n    };\n  \n    if (options.chamfer) {\n        var chamfer = options.chamfer;\n        polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n            chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n        delete options.chamfer;\n    }\n  \n    return Body.create(commonExtend({}, polygon, options));\n  };\n  \n\n","import {Body, Engine, Render, Bodies, World, Vector, Runner, Events, Mouse, MouseConstraint} from \"matter-js\";\nimport {createPartCircle} from \"./utils/CustomBodies\"\nimport { getTranformedPoint, findMinimumDistanceToObstacle } from \"./utils/utils\";\n\n\nexport class TwoWheelRobot {\n    private _canvas : any;\n    private _engine : Engine;\n    private _render : Render; \n    private _runner : Runner;\n\n    robotBody : Body;\n    leftWheelBody : Body;\n    rightWheelBody : Body;\n    robotInitialPosition : Vector;\n    robotInitialAngle : number;\n\n    ultrasonicSensor : Body;\n    static readonly maxUltrasonicDistance = 200;\n    ultrasonicSensorDistance : number;\n    \n    robot : Body;\n\n    obstacles : Array<Body>;\n    coins : Array<Body>;\n\n    static readonly forceMultiplier = 1;\n    leftWheelSpeed : number;\n    rightWheelSpeed : number;\n\n    constructor(canvas:any, robotInitialPosition : Vector = { x: 50, y: 100}, robotInitialAngle : number = 0) {\n        this._canvas = canvas;\n        this._engine = Engine.create();\n\n        //remove gravity\n        this._engine.world.gravity.y = 0;\n\n        this._render = Render.create({\n            canvas: this._canvas,\n            engine: this._engine,\n            options: {\n              width: 800,\n              height: 800,\n              wireframes: false\n            }\n          });\n        \n        this._runner = Runner.create();\n       \n        this.obstacles = [];\n        this.coins = [];\n        this.rightWheelSpeed = 0;\n        this.leftWheelSpeed = 0;\n        this.ultrasonicSensorDistance = TwoWheelRobot.maxUltrasonicDistance;\n\n        //create the robot body object\n        this.robotBody = Bodies.rectangle(100, 100, 50, 30 );\n        this.leftWheelBody = Bodies.rectangle(88, 82, 20, 6);\n        this.rightWheelBody = Bodies.rectangle(88, 118, 20, 6);\n        //create the ultrasonic sensor body\n        this.ultrasonicSensor = createPartCircle(110,-30, 50,200, -3*Math.PI/7,{});\n        this.ultrasonicSensor.isSensor = true;\n        this.ultrasonicSensor.render.opacity = 0.2;\n        this.ultrasonicSensor.mass = 0;\n        this.ultrasonicSensor.area =  0;  \n        //create the robot from parts\n        this.robot = Body.create({parts: [this.ultrasonicSensor,this.robotBody, this.leftWheelBody, this.rightWheelBody]});\n        this.robot.frictionAir = 0.5;\n        Body.setMass(this.robot, 1000);\n        this.robotInitialPosition = robotInitialPosition;\n        this.robotInitialAngle = robotInitialAngle; \n\n\n        //add circle obstacle for testing\n        //add obstacle\n    /* var obstacle = Bodies.circle(200, 200, 50);\n    Body.setMass(obstacle, 100000000);  //make it very heavy\n    this.obstacles.push(obstacle);\n     */\n        World.add(this._engine.world, [this.robot, ]);//obstacle]);\n\n        Render.run(this._render); \n\n\n        //add collision events to calculate obstacle distance\n        let self = this;\n        Events.on(this._engine, 'collisionActive',function(event) {self.onCollision(event);});\n        Events.on(this._engine, \"collisionEnd\", function(event) {\n            self.ultrasonicSensorDistance = TwoWheelRobot.maxUltrasonicDistance;\n        })\n\n\n        /* //add mouse for testing\n            // add mouse control\n        var mouse = Mouse.create(this._render.canvas),\n        mouseConstraint = MouseConstraint.create(this._engine, {\n            mouse: mouse,\n            constraint: {\n                stiffness: 0.2,\n                render: {\n                    visible: false\n                }\n            }\n        });\n\n        World.add(this._engine.world, mouseConstraint);\n\n        // keep the mouse in sync with rendering\n        this._render.mouse = mouse;\n\n        */    \n    }\n\n    private onCollision(event)\n    {   \n        if(this.robot)\n        {\n        const sensorStartingPoint = getTranformedPoint(this.robot.position, 0, 15, -10);   \n        const startingAngle = this.robot.angle - 5*Math.PI/12;\n        this.ultrasonicSensorDistance = findMinimumDistanceToObstacle(sensorStartingPoint, startingAngle, 200, this.obstacles);\n        if(this.ultrasonicSensorDistance > TwoWheelRobot.maxUltrasonicDistance) \n            this.ultrasonicSensorDistance = TwoWheelRobot.maxUltrasonicDistance;\n        \n        }\n    }\n    addObstacleRectangle(posX : number, posY : number, width : number, height : number, color = \"grey\", label = \"rectangle\" ) : void {\n        const obstacle = Bodies.rectangle(posX, posY, width, height, { isStatic: true, label: label, render: {fillStyle : color} });\n        this.obstacles.push(obstacle);\n        World.add(this._engine.world, [obstacle]);\n    }\n    setSpeeds(left : number, right : number) : void {\n        this.leftWheelSpeed = left;\n        this.rightWheelSpeed = right;\n    }\n    \n    applyForces() : void {\n\n    const leftForcePosition = getTranformedPoint(this.robotBody.position, this.robot.angle, -10, -500);\n    const rightForcePosition = getTranformedPoint(this.robotBody.position, this.robot.angle, -10, 500);\n    \n    let leftWheelForce = Vector.create(TwoWheelRobot.forceMultiplier*Math.abs(this.leftWheelSpeed), 0);\n    leftWheelForce = Vector.rotate(leftWheelForce, this.robot.angle);\n    if(this.leftWheelSpeed < 0)\n        leftWheelForce = Vector.neg(leftWheelForce);\n    \n    let rightWheelForce = Vector.create(TwoWheelRobot.forceMultiplier*Math.abs(this.rightWheelSpeed), 0);\n    rightWheelForce = Vector.rotate(rightWheelForce, this.robot.angle);\n    if(this.rightWheelSpeed < 0)\n        rightWheelForce = Vector.neg(rightWheelForce);\n\n\n    Body.applyForce(this.robot, leftForcePosition, leftWheelForce);\n    Body.applyForce(this.robot, rightForcePosition, rightWheelForce);\n    \n    }\n\n    setRobotPosition(position : Vector) : void\n    {\n        Body.setPosition(this.robot, position);\n    }\n    \n    setRobotInitialPosition(position : Vector) : void\n    {\n\n    }\n    run() {\n        Engine.run(this._engine);\n    }\n\n    tick(period : number) {\n        Engine.update(this._engine, period);\n    }\n\n    reset()\n    {\n        this.onCollision(undefined);\n        Body.setPosition(this.robot, this.robotInitialPosition);\n        Body.setAngle(this.robot, this.robotInitialAngle);\n    }\n}\n","/**\r\n * AVR 8 CPU data structures\r\n * Part of AVR8js\r\n *\r\n * Copyright (C) 2019, Uri Shaked\r\n */\r\nconst registerSpace = 0x100;\r\nexport class CPU {\r\n    constructor(progMem, sramBytes = 8192) {\r\n        this.progMem = progMem;\r\n        this.sramBytes = sramBytes;\r\n        this.data = new Uint8Array(this.sramBytes + registerSpace);\r\n        this.data16 = new Uint16Array(this.data.buffer);\r\n        this.dataView = new DataView(this.data.buffer);\r\n        this.progBytes = new Uint8Array(this.progMem.buffer);\r\n        this.readHooks = [];\r\n        this.writeHooks = [];\r\n        this.pc22Bits = this.progBytes.length > 0x20000;\r\n        this.pc = 0;\r\n        this.cycles = 0;\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.data.fill(0);\r\n        this.SP = this.data.length - 1;\r\n    }\r\n    readData(addr) {\r\n        if (addr >= 32 && this.readHooks[addr]) {\r\n            return this.readHooks[addr](addr);\r\n        }\r\n        return this.data[addr];\r\n    }\r\n    writeData(addr, value) {\r\n        const hook = this.writeHooks[addr];\r\n        if (hook) {\r\n            if (hook(value, this.data[addr], addr)) {\r\n                return;\r\n            }\r\n        }\r\n        this.data[addr] = value;\r\n    }\r\n    get SP() {\r\n        return this.dataView.getUint16(93, true);\r\n    }\r\n    set SP(value) {\r\n        this.dataView.setUint16(93, value, true);\r\n    }\r\n    get SREG() {\r\n        return this.data[95];\r\n    }\r\n    get interruptsEnabled() {\r\n        return this.SREG & 0x80 ? true : false;\r\n    }\r\n}\r\n","/**\r\n * AVR-8 Instruction Simulation\r\n * Part of AVR8js\r\n *\r\n * Reference: http://ww1.microchip.com/downloads/en/devicedoc/atmel-0856-avr-instruction-set-manual.pdf\r\n *\r\n * Instruction timing is currently based on ATmega328p (see the Instruction Set Summary at the end of\r\n * the datasheet)\r\n *\r\n * Copyright (C) 2019, 2020 Uri Shaked\r\n */\r\nfunction isTwoWordInstruction(opcode) {\r\n    return (\r\n    /* LDS */\r\n    (opcode & 0xfe0f) === 0x9000 ||\r\n        /* STS */\r\n        (opcode & 0xfe0f) === 0x9200 ||\r\n        /* CALL */\r\n        (opcode & 0xfe0e) === 0x940e ||\r\n        /* JMP */\r\n        (opcode & 0xfe0e) === 0x940c);\r\n}\r\nexport function avrInstruction(cpu) {\r\n    const opcode = cpu.progMem[cpu.pc];\r\n    if ((opcode & 0xfc00) === 0x1c00) {\r\n        /* ADC, 0001 11rd dddd rrrr */\r\n        const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const r = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        const sum = d + r + (cpu.data[95] & 1);\r\n        const R = sum & 255;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= (R ^ r) & (d ^ R) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= sum & 256 ? 1 : 0;\r\n        sreg |= 1 & ((d & r) | (r & ~R) | (~R & d)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0xc00) {\r\n        /* ADD, 0000 11rd dddd rrrr */\r\n        const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const r = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        const R = (d + r) & 255;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= (R ^ r) & (R ^ d) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= (d + r) & 256 ? 1 : 0;\r\n        sreg |= 1 & ((d & r) | (r & ~R) | (~R & d)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xff00) === 0x9600) {\r\n        /* ADIW, 1001 0110 KKdd KKKK */\r\n        const addr = 2 * ((opcode & 0x30) >> 4) + 24;\r\n        const value = cpu.dataView.getUint16(addr, true);\r\n        const R = (value + ((opcode & 0xf) | ((opcode & 0xc0) >> 2))) & 0xffff;\r\n        cpu.dataView.setUint16(addr, R, true);\r\n        let sreg = cpu.data[95] & 0xe0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 0x8000 & R ? 4 : 0;\r\n        sreg |= ~value & R & 0x8000 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= ~R & value & 0x8000 ? 1 : 0;\r\n        cpu.data[95] = sreg;\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x2000) {\r\n        /* AND, 0010 00rd dddd rrrr */\r\n        const R = cpu.data[(opcode & 0x1f0) >> 4] & cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xf000) === 0x7000) {\r\n        /* ANDI, 0111 KKKK dddd KKKK */\r\n        const R = cpu.data[((opcode & 0xf0) >> 4) + 16] & ((opcode & 0xf) | ((opcode & 0xf00) >> 4));\r\n        cpu.data[((opcode & 0xf0) >> 4) + 16] = R;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9405) {\r\n        /* ASR, 1001 010d dddd 0101 */\r\n        const value = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const R = (value >>> 1) | (128 & value);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xe0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= value & 1;\r\n        sreg |= ((sreg >> 2) & 1) ^ (sreg & 1) ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xff8f) === 0x9488) {\r\n        /* BCLR, 1001 0100 1sss 1000 */\r\n        cpu.data[95] &= ~(1 << ((opcode & 0x70) >> 4));\r\n    }\r\n    else if ((opcode & 0xfe08) === 0xf800) {\r\n        /* BLD, 1111 100d dddd 0bbb */\r\n        const b = opcode & 7;\r\n        const d = (opcode & 0x1f0) >> 4;\r\n        cpu.data[d] = (~(1 << b) & cpu.data[d]) | (((cpu.data[95] >> 6) & 1) << b);\r\n    }\r\n    else if ((opcode & 0xfc00) === 0xf400) {\r\n        /* BRBC, 1111 01kk kkkk ksss */\r\n        if (!(cpu.data[95] & (1 << (opcode & 7)))) {\r\n            cpu.pc = cpu.pc + (((opcode & 0x1f8) >> 3) - (opcode & 0x200 ? 0x40 : 0));\r\n            cpu.cycles++;\r\n        }\r\n    }\r\n    else if ((opcode & 0xfc00) === 0xf000) {\r\n        /* BRBS, 1111 00kk kkkk ksss */\r\n        if (cpu.data[95] & (1 << (opcode & 7))) {\r\n            cpu.pc = cpu.pc + (((opcode & 0x1f8) >> 3) - (opcode & 0x200 ? 0x40 : 0));\r\n            cpu.cycles++;\r\n        }\r\n    }\r\n    else if ((opcode & 0xff8f) === 0x9408) {\r\n        /* BSET, 1001 0100 0sss 1000 */\r\n        cpu.data[95] |= 1 << ((opcode & 0x70) >> 4);\r\n    }\r\n    else if ((opcode & 0xfe08) === 0xfa00) {\r\n        /* BST, 1111 101d dddd 0bbb */\r\n        const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const b = opcode & 7;\r\n        cpu.data[95] = (cpu.data[95] & 0xbf) | ((d >> b) & 1 ? 0x40 : 0);\r\n    }\r\n    else if ((opcode & 0xfe0e) === 0x940e) {\r\n        /* CALL, 1001 010k kkkk 111k kkkk kkkk kkkk kkkk */\r\n        const k = cpu.progMem[cpu.pc + 1] | ((opcode & 1) << 16) | ((opcode & 0x1f0) << 13);\r\n        const ret = cpu.pc + 2;\r\n        const sp = cpu.dataView.getUint16(93, true);\r\n        const { pc22Bits } = cpu;\r\n        cpu.data[sp] = 255 & ret;\r\n        cpu.data[sp - 1] = (ret >> 8) & 255;\r\n        if (pc22Bits) {\r\n            cpu.data[sp - 2] = (ret >> 16) & 255;\r\n        }\r\n        cpu.dataView.setUint16(93, sp - (pc22Bits ? 3 : 2), true);\r\n        cpu.pc = k - 1;\r\n        cpu.cycles += pc22Bits ? 4 : 3;\r\n    }\r\n    else if ((opcode & 0xff00) === 0x9800) {\r\n        /* CBI, 1001 1000 AAAA Abbb */\r\n        const A = opcode & 0xf8;\r\n        const b = opcode & 7;\r\n        const R = cpu.readData((A >> 3) + 32);\r\n        cpu.writeData((A >> 3) + 32, R & ~(1 << b));\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9400) {\r\n        /* COM, 1001 010d dddd 0000 */\r\n        const d = (opcode & 0x1f0) >> 4;\r\n        const R = 255 - cpu.data[d];\r\n        cpu.data[d] = R;\r\n        let sreg = (cpu.data[95] & 0xe1) | 1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x1400) {\r\n        /* CP, 0001 01rd dddd rrrr */\r\n        const val1 = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const val2 = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        const R = val1 - val2;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= 0 !== ((val1 ^ val2) & (val1 ^ R) & 128) ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= val2 > val1 ? 1 : 0;\r\n        sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x400) {\r\n        /* CPC, 0000 01rd dddd rrrr */\r\n        const arg1 = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const arg2 = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        let sreg = cpu.data[95];\r\n        const r = arg1 - arg2 - (sreg & 1);\r\n        sreg = (sreg & 0xc0) | (!r && (sreg >> 1) & 1 ? 2 : 0) | (arg2 + (sreg & 1) > arg1 ? 1 : 0);\r\n        sreg |= 128 & r ? 4 : 0;\r\n        sreg |= (arg1 ^ arg2) & (arg1 ^ r) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= 1 & ((~arg1 & arg2) | (arg2 & r) | (r & ~arg1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xf000) === 0x3000) {\r\n        /* CPI, 0011 KKKK dddd KKKK */\r\n        const arg1 = cpu.data[((opcode & 0xf0) >> 4) + 16];\r\n        const arg2 = (opcode & 0xf) | ((opcode & 0xf00) >> 4);\r\n        const r = arg1 - arg2;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= r ? 0 : 2;\r\n        sreg |= 128 & r ? 4 : 0;\r\n        sreg |= (arg1 ^ arg2) & (arg1 ^ r) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= arg2 > arg1 ? 1 : 0;\r\n        sreg |= 1 & ((~arg1 & arg2) | (arg2 & r) | (r & ~arg1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x1000) {\r\n        /* CPSE, 0001 00rd dddd rrrr */\r\n        if (cpu.data[(opcode & 0x1f0) >> 4] === cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)]) {\r\n            const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n            const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n            cpu.pc += skipSize;\r\n            cpu.cycles += skipSize;\r\n        }\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x940a) {\r\n        /* DEC, 1001 010d dddd 1010 */\r\n        const value = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const R = value - 1;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= 128 === value ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if (opcode === 0x9519) {\r\n        /* EICALL, 1001 0101 0001 1001 */\r\n        const retAddr = cpu.pc + 1;\r\n        const sp = cpu.dataView.getUint16(93, true);\r\n        const eind = cpu.data[0x3c];\r\n        cpu.data[sp] = retAddr & 255;\r\n        cpu.data[sp - 1] = (retAddr >> 8) & 255;\r\n        cpu.dataView.setUint16(93, sp - 2, true);\r\n        cpu.pc = ((eind << 16) | cpu.dataView.getUint16(30, true)) - 1;\r\n        cpu.cycles += 3;\r\n    }\r\n    else if (opcode === 0x9419) {\r\n        /* EIJMP, 1001 0100 0001 1001 */\r\n        const eind = cpu.data[0x3c];\r\n        cpu.pc = ((eind << 16) | cpu.dataView.getUint16(30, true)) - 1;\r\n        cpu.cycles++;\r\n    }\r\n    else if (opcode === 0x95d8) {\r\n        /* ELPM, 1001 0101 1101 1000 */\r\n        const rampz = cpu.data[0x3b];\r\n        cpu.data[0] = cpu.progBytes[(rampz << 16) | cpu.dataView.getUint16(30, true)];\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9006) {\r\n        /* ELPM(REG), 1001 000d dddd 0110 */\r\n        const rampz = cpu.data[0x3b];\r\n        cpu.data[(opcode & 0x1f0) >> 4] =\r\n            cpu.progBytes[(rampz << 16) | cpu.dataView.getUint16(30, true)];\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9007) {\r\n        /* ELPM(INC), 1001 000d dddd 0111 */\r\n        const rampz = cpu.data[0x3b];\r\n        const i = cpu.dataView.getUint16(30, true);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.progBytes[(rampz << 16) | i];\r\n        cpu.dataView.setUint16(30, i + 1, true);\r\n        if (i === 0xffff) {\r\n            cpu.data[0x3b] = (rampz + 1) % (cpu.progBytes.length >> 16);\r\n        }\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x2400) {\r\n        /* EOR, 0010 01rd dddd rrrr */\r\n        const R = cpu.data[(opcode & 0x1f0) >> 4] ^ cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xff88) === 0x308) {\r\n        /* FMUL, 0000 0011 0ddd 1rrr */\r\n        const v1 = cpu.data[((opcode & 0x70) >> 4) + 16];\r\n        const v2 = cpu.data[(opcode & 7) + 16];\r\n        const R = (v1 * v2) << 1;\r\n        cpu.dataView.setUint16(0, R, true);\r\n        cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | ((v1 * v2) & 0x8000 ? 1 : 0);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xff88) === 0x380) {\r\n        /* FMULS, 0000 0011 1ddd 0rrr */\r\n        const v1 = cpu.dataView.getInt8(((opcode & 0x70) >> 4) + 16);\r\n        const v2 = cpu.dataView.getInt8((opcode & 7) + 16);\r\n        const R = (v1 * v2) << 1;\r\n        cpu.dataView.setInt16(0, R, true);\r\n        cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | ((v1 * v2) & 0x8000 ? 1 : 0);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xff88) === 0x388) {\r\n        /* FMULSU, 0000 0011 1ddd 1rrr */\r\n        const v1 = cpu.dataView.getInt8(((opcode & 0x70) >> 4) + 16);\r\n        const v2 = cpu.data[(opcode & 7) + 16];\r\n        const R = (v1 * v2) << 1;\r\n        cpu.dataView.setInt16(0, R, true);\r\n        cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 2 : 0) | ((v1 * v2) & 0x8000 ? 1 : 0);\r\n        cpu.cycles++;\r\n    }\r\n    else if (opcode === 0x9509) {\r\n        /* ICALL, 1001 0101 0000 1001 */\r\n        const retAddr = cpu.pc + 1;\r\n        const sp = cpu.dataView.getUint16(93, true);\r\n        const { pc22Bits } = cpu;\r\n        cpu.data[sp] = retAddr & 255;\r\n        cpu.data[sp - 1] = (retAddr >> 8) & 255;\r\n        if (pc22Bits) {\r\n            cpu.data[sp - 2] = (retAddr >> 16) & 255;\r\n        }\r\n        cpu.dataView.setUint16(93, sp - (pc22Bits ? 3 : 2), true);\r\n        cpu.pc = cpu.dataView.getUint16(30, true) - 1;\r\n        cpu.cycles += pc22Bits ? 3 : 2;\r\n    }\r\n    else if (opcode === 0x9409) {\r\n        /* IJMP, 1001 0100 0000 1001 */\r\n        cpu.pc = cpu.dataView.getUint16(30, true) - 1;\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xf800) === 0xb000) {\r\n        /* IN, 1011 0AAd dddd AAAA */\r\n        const i = cpu.readData(((opcode & 0xf) | ((opcode & 0x600) >> 5)) + 32);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = i;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9403) {\r\n        /* INC, 1001 010d dddd 0011 */\r\n        const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const r = (d + 1) & 255;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = r;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= r ? 0 : 2;\r\n        sreg |= 128 & r ? 4 : 0;\r\n        sreg |= 127 === d ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfe0e) === 0x940c) {\r\n        /* JMP, 1001 010k kkkk 110k kkkk kkkk kkkk kkkk */\r\n        cpu.pc = (cpu.progMem[cpu.pc + 1] | ((opcode & 1) << 16) | ((opcode & 0x1f0) << 13)) - 1;\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9206) {\r\n        /* LAC, 1001 001r rrrr 0110 */\r\n        const r = (opcode & 0x1f0) >> 4;\r\n        const clear = cpu.data[r];\r\n        const value = cpu.readData(cpu.dataView.getUint16(30, true));\r\n        cpu.writeData(cpu.dataView.getUint16(30, true), value & (255 - clear));\r\n        cpu.data[r] = value;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9205) {\r\n        /* LAS, 1001 001r rrrr 0101 */\r\n        const r = (opcode & 0x1f0) >> 4;\r\n        const set = cpu.data[r];\r\n        const value = cpu.readData(cpu.dataView.getUint16(30, true));\r\n        cpu.writeData(cpu.dataView.getUint16(30, true), value | set);\r\n        cpu.data[r] = value;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9207) {\r\n        /* LAT, 1001 001r rrrr 0111 */\r\n        const r = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const R = cpu.readData(cpu.dataView.getUint16(30, true));\r\n        cpu.writeData(cpu.dataView.getUint16(30, true), r ^ R);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n    }\r\n    else if ((opcode & 0xf000) === 0xe000) {\r\n        /* LDI, 1110 KKKK dddd KKKK */\r\n        cpu.data[((opcode & 0xf0) >> 4) + 16] = (opcode & 0xf) | ((opcode & 0xf00) >> 4);\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9000) {\r\n        /* LDS, 1001 000d dddd 0000 kkkk kkkk kkkk kkkk */\r\n        cpu.cycles++;\r\n        const value = cpu.readData(cpu.progMem[cpu.pc + 1]);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = value;\r\n        cpu.pc++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x900c) {\r\n        /* LDX, 1001 000d dddd 1100 */\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(26, true));\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x900d) {\r\n        /* LDX(INC), 1001 000d dddd 1101 */\r\n        const x = cpu.dataView.getUint16(26, true);\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(x);\r\n        cpu.dataView.setUint16(26, x + 1, true);\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x900e) {\r\n        /* LDX(DEC), 1001 000d dddd 1110 */\r\n        const x = cpu.dataView.getUint16(26, true) - 1;\r\n        cpu.dataView.setUint16(26, x, true);\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(x);\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x8008) {\r\n        /* LDY, 1000 000d dddd 1000 */\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(28, true));\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9009) {\r\n        /* LDY(INC), 1001 000d dddd 1001 */\r\n        const y = cpu.dataView.getUint16(28, true);\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(y);\r\n        cpu.dataView.setUint16(28, y + 1, true);\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x900a) {\r\n        /* LDY(DEC), 1001 000d dddd 1010 */\r\n        const y = cpu.dataView.getUint16(28, true) - 1;\r\n        cpu.dataView.setUint16(28, y, true);\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(y);\r\n    }\r\n    else if ((opcode & 0xd208) === 0x8008 &&\r\n        (opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)) {\r\n        /* LDDY, 10q0 qq0d dddd 1qqq */\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(28, true) +\r\n            ((opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)));\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x8000) {\r\n        /* LDZ, 1000 000d dddd 0000 */\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(30, true));\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9001) {\r\n        /* LDZ(INC), 1001 000d dddd 0001 */\r\n        const z = cpu.dataView.getUint16(30, true);\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(z);\r\n        cpu.dataView.setUint16(30, z + 1, true);\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9002) {\r\n        /* LDZ(DEC), 1001 000d dddd 0010 */\r\n        const z = cpu.dataView.getUint16(30, true) - 1;\r\n        cpu.dataView.setUint16(30, z, true);\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(z);\r\n    }\r\n    else if ((opcode & 0xd208) === 0x8000 &&\r\n        (opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)) {\r\n        /* LDDZ, 10q0 qq0d dddd 0qqq */\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(30, true) +\r\n            ((opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)));\r\n    }\r\n    else if (opcode === 0x95c8) {\r\n        /* LPM, 1001 0101 1100 1000 */\r\n        cpu.data[0] = cpu.progBytes[cpu.dataView.getUint16(30, true)];\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9004) {\r\n        /* LPM(REG), 1001 000d dddd 0100 */\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.progBytes[cpu.dataView.getUint16(30, true)];\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9005) {\r\n        /* LPM(INC), 1001 000d dddd 0101 */\r\n        const i = cpu.dataView.getUint16(30, true);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.progBytes[i];\r\n        cpu.dataView.setUint16(30, i + 1, true);\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9406) {\r\n        /* LSR, 1001 010d dddd 0110 */\r\n        const value = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const R = value >>> 1;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xe0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= value & 1;\r\n        sreg |= ((sreg >> 2) & 1) ^ (sreg & 1) ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x2c00) {\r\n        /* MOV, 0010 11rd dddd rrrr */\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n    }\r\n    else if ((opcode & 0xff00) === 0x100) {\r\n        /* MOVW, 0000 0001 dddd rrrr */\r\n        const r2 = 2 * (opcode & 0xf);\r\n        const d2 = 2 * ((opcode & 0xf0) >> 4);\r\n        cpu.data[d2] = cpu.data[r2];\r\n        cpu.data[d2 + 1] = cpu.data[r2 + 1];\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x9c00) {\r\n        /* MUL, 1001 11rd dddd rrrr */\r\n        const R = cpu.data[(opcode & 0x1f0) >> 4] * cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        cpu.dataView.setUint16(0, R, true);\r\n        cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | (0x8000 & R ? 1 : 0);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xff00) === 0x200) {\r\n        /* MULS, 0000 0010 dddd rrrr */\r\n        const R = cpu.dataView.getInt8(((opcode & 0xf0) >> 4) + 16) * cpu.dataView.getInt8((opcode & 0xf) + 16);\r\n        cpu.dataView.setInt16(0, R, true);\r\n        cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | (0x8000 & R ? 1 : 0);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xff88) === 0x300) {\r\n        /* MULSU, 0000 0011 0ddd 0rrr */\r\n        const R = cpu.dataView.getInt8(((opcode & 0x70) >> 4) + 16) * cpu.data[(opcode & 7) + 16];\r\n        cpu.dataView.setInt16(0, R, true);\r\n        cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | (0x8000 & R ? 1 : 0);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9401) {\r\n        /* NEG, 1001 010d dddd 0001 */\r\n        const d = (opcode & 0x1f0) >> 4;\r\n        const value = cpu.data[d];\r\n        const R = 0 - value;\r\n        cpu.data[d] = R;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= 128 === R ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= R ? 1 : 0;\r\n        sreg |= 1 & (R | value) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if (opcode === 0) {\r\n        /* NOP, 0000 0000 0000 0000 */\r\n        /* NOP */\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x2800) {\r\n        /* OR, 0010 10rd dddd rrrr */\r\n        const R = cpu.data[(opcode & 0x1f0) >> 4] | cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xf000) === 0x6000) {\r\n        /* SBR, 0110 KKKK dddd KKKK */\r\n        const R = cpu.data[((opcode & 0xf0) >> 4) + 16] | ((opcode & 0xf) | ((opcode & 0xf00) >> 4));\r\n        cpu.data[((opcode & 0xf0) >> 4) + 16] = R;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xf800) === 0xb800) {\r\n        /* OUT, 1011 1AAr rrrr AAAA */\r\n        cpu.writeData(((opcode & 0xf) | ((opcode & 0x600) >> 5)) + 32, cpu.data[(opcode & 0x1f0) >> 4]);\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x900f) {\r\n        /* POP, 1001 000d dddd 1111 */\r\n        const value = cpu.dataView.getUint16(93, true) + 1;\r\n        cpu.dataView.setUint16(93, value, true);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.data[value];\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x920f) {\r\n        /* PUSH, 1001 001d dddd 1111 */\r\n        const value = cpu.dataView.getUint16(93, true);\r\n        cpu.data[value] = cpu.data[(opcode & 0x1f0) >> 4];\r\n        cpu.dataView.setUint16(93, value - 1, true);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xf000) === 0xd000) {\r\n        /* RCALL, 1101 kkkk kkkk kkkk */\r\n        const k = (opcode & 0x7ff) - (opcode & 0x800 ? 0x800 : 0);\r\n        const retAddr = cpu.pc + 1;\r\n        const sp = cpu.dataView.getUint16(93, true);\r\n        const { pc22Bits } = cpu;\r\n        cpu.data[sp] = 255 & retAddr;\r\n        cpu.data[sp - 1] = (retAddr >> 8) & 255;\r\n        if (pc22Bits) {\r\n            cpu.data[sp - 2] = (retAddr >> 16) & 255;\r\n        }\r\n        cpu.dataView.setUint16(93, sp - (pc22Bits ? 3 : 2), true);\r\n        cpu.pc += k;\r\n        cpu.cycles += pc22Bits ? 3 : 2;\r\n    }\r\n    else if (opcode === 0x9508) {\r\n        /* RET, 1001 0101 0000 1000 */\r\n        const { pc22Bits } = cpu;\r\n        const i = cpu.dataView.getUint16(93, true) + (pc22Bits ? 3 : 2);\r\n        cpu.dataView.setUint16(93, i, true);\r\n        cpu.pc = (cpu.data[i - 1] << 8) + cpu.data[i] - 1;\r\n        if (pc22Bits) {\r\n            cpu.pc |= cpu.data[i - 2] << 16;\r\n        }\r\n        cpu.cycles += pc22Bits ? 4 : 3;\r\n    }\r\n    else if (opcode === 0x9518) {\r\n        /* RETI, 1001 0101 0001 1000 */\r\n        const { pc22Bits } = cpu;\r\n        const i = cpu.dataView.getUint16(93, true) + (pc22Bits ? 3 : 2);\r\n        cpu.dataView.setUint16(93, i, true);\r\n        cpu.pc = (cpu.data[i - 1] << 8) + cpu.data[i] - 1;\r\n        if (pc22Bits) {\r\n            cpu.pc |= cpu.data[i - 2] << 16;\r\n        }\r\n        cpu.cycles += pc22Bits ? 4 : 3;\r\n        cpu.data[95] |= 0x80; // Enable interrupts\r\n    }\r\n    else if ((opcode & 0xf000) === 0xc000) {\r\n        /* RJMP, 1100 kkkk kkkk kkkk */\r\n        cpu.pc = cpu.pc + ((opcode & 0x7ff) - (opcode & 0x800 ? 0x800 : 0));\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9407) {\r\n        /* ROR, 1001 010d dddd 0111 */\r\n        const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const r = (d >>> 1) | ((cpu.data[95] & 1) << 7);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = r;\r\n        let sreg = cpu.data[95] & 0xe0;\r\n        sreg |= r ? 0 : 2;\r\n        sreg |= 128 & r ? 4 : 0;\r\n        sreg |= 1 & d ? 1 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ (sreg & 1) ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x800) {\r\n        /* SBC, 0000 10rd dddd rrrr */\r\n        const val1 = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const val2 = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        let sreg = cpu.data[95];\r\n        const R = val1 - val2 - (sreg & 1);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        sreg = (sreg & 0xc0) | (!R && (sreg >> 1) & 1 ? 2 : 0) | (val2 + (sreg & 1) > val1 ? 1 : 0);\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= (val1 ^ val2) & (val1 ^ R) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xf000) === 0x4000) {\r\n        /* SBCI, 0100 KKKK dddd KKKK */\r\n        const val1 = cpu.data[((opcode & 0xf0) >> 4) + 16];\r\n        const val2 = (opcode & 0xf) | ((opcode & 0xf00) >> 4);\r\n        let sreg = cpu.data[95];\r\n        const R = val1 - val2 - (sreg & 1);\r\n        cpu.data[((opcode & 0xf0) >> 4) + 16] = R;\r\n        sreg = (sreg & 0xc0) | (!R && (sreg >> 1) & 1 ? 2 : 0) | (val2 + (sreg & 1) > val1 ? 1 : 0);\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= (val1 ^ val2) & (val1 ^ R) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xff00) === 0x9a00) {\r\n        /* SBI, 1001 1010 AAAA Abbb */\r\n        const target = ((opcode & 0xf8) >> 3) + 32;\r\n        cpu.writeData(target, cpu.readData(target) | (1 << (opcode & 7)));\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xff00) === 0x9900) {\r\n        /* SBIC, 1001 1001 AAAA Abbb */\r\n        const value = cpu.readData(((opcode & 0xf8) >> 3) + 32);\r\n        if (!(value & (1 << (opcode & 7)))) {\r\n            const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n            const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n            cpu.cycles += skipSize;\r\n            cpu.pc += skipSize;\r\n        }\r\n    }\r\n    else if ((opcode & 0xff00) === 0x9b00) {\r\n        /* SBIS, 1001 1011 AAAA Abbb */\r\n        const value = cpu.readData(((opcode & 0xf8) >> 3) + 32);\r\n        if (value & (1 << (opcode & 7))) {\r\n            const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n            const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n            cpu.cycles += skipSize;\r\n            cpu.pc += skipSize;\r\n        }\r\n    }\r\n    else if ((opcode & 0xff00) === 0x9700) {\r\n        /* SBIW, 1001 0111 KKdd KKKK */\r\n        const i = 2 * ((opcode & 0x30) >> 4) + 24;\r\n        const a = cpu.dataView.getUint16(i, true);\r\n        const l = (opcode & 0xf) | ((opcode & 0xc0) >> 2);\r\n        const R = a - l;\r\n        cpu.dataView.setUint16(i, R, true);\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 0x8000 & R ? 4 : 0;\r\n        sreg |= a & ~R & 0x8000 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= l > a ? 1 : 0;\r\n        sreg |= 1 & ((~a & l) | (l & R) | (R & ~a)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe08) === 0xfc00) {\r\n        /* SBRC, 1111 110r rrrr 0bbb */\r\n        if (!(cpu.data[(opcode & 0x1f0) >> 4] & (1 << (opcode & 7)))) {\r\n            const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n            const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n            cpu.cycles += skipSize;\r\n            cpu.pc += skipSize;\r\n        }\r\n    }\r\n    else if ((opcode & 0xfe08) === 0xfe00) {\r\n        /* SBRS, 1111 111r rrrr 0bbb */\r\n        if (cpu.data[(opcode & 0x1f0) >> 4] & (1 << (opcode & 7))) {\r\n            const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n            const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n            cpu.cycles += skipSize;\r\n            cpu.pc += skipSize;\r\n        }\r\n    }\r\n    else if (opcode === 0x9588) {\r\n        /* SLEEP, 1001 0101 1000 1000 */\r\n        /* not implemented */\r\n    }\r\n    else if (opcode === 0x95e8) {\r\n        /* SPM, 1001 0101 1110 1000 */\r\n        /* not implemented */\r\n    }\r\n    else if (opcode === 0x95f8) {\r\n        /* SPM(INC), 1001 0101 1111 1000 */\r\n        /* not implemented */\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9200) {\r\n        /* STS, 1001 001d dddd 0000 kkkk kkkk kkkk kkkk */\r\n        const value = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const addr = cpu.progMem[cpu.pc + 1];\r\n        cpu.writeData(addr, value);\r\n        cpu.pc++;\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x920c) {\r\n        /* STX, 1001 001r rrrr 1100 */\r\n        cpu.writeData(cpu.dataView.getUint16(26, true), cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x920d) {\r\n        /* STX(INC), 1001 001r rrrr 1101 */\r\n        const x = cpu.dataView.getUint16(26, true);\r\n        cpu.writeData(x, cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.dataView.setUint16(26, x + 1, true);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x920e) {\r\n        /* STX(DEC), 1001 001r rrrr 1110 */\r\n        const i = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const x = cpu.dataView.getUint16(26, true) - 1;\r\n        cpu.dataView.setUint16(26, x, true);\r\n        cpu.writeData(x, i);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x8208) {\r\n        /* STY, 1000 001r rrrr 1000 */\r\n        cpu.writeData(cpu.dataView.getUint16(28, true), cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9209) {\r\n        /* STY(INC), 1001 001r rrrr 1001 */\r\n        const i = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const y = cpu.dataView.getUint16(28, true);\r\n        cpu.writeData(y, i);\r\n        cpu.dataView.setUint16(28, y + 1, true);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x920a) {\r\n        /* STY(DEC), 1001 001r rrrr 1010 */\r\n        const i = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const y = cpu.dataView.getUint16(28, true) - 1;\r\n        cpu.dataView.setUint16(28, y, true);\r\n        cpu.writeData(y, i);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xd208) === 0x8208 &&\r\n        (opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)) {\r\n        /* STDY, 10q0 qq1r rrrr 1qqq */\r\n        cpu.writeData(cpu.dataView.getUint16(28, true) +\r\n            ((opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)), cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x8200) {\r\n        /* STZ, 1000 001r rrrr 0000 */\r\n        cpu.writeData(cpu.dataView.getUint16(30, true), cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9201) {\r\n        /* STZ(INC), 1001 001r rrrr 0001 */\r\n        const z = cpu.dataView.getUint16(30, true);\r\n        cpu.writeData(z, cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.dataView.setUint16(30, z + 1, true);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9202) {\r\n        /* STZ(DEC), 1001 001r rrrr 0010 */\r\n        const i = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const z = cpu.dataView.getUint16(30, true) - 1;\r\n        cpu.dataView.setUint16(30, z, true);\r\n        cpu.writeData(z, i);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xd208) === 0x8200 &&\r\n        (opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)) {\r\n        /* STDZ, 10q0 qq1r rrrr 0qqq */\r\n        cpu.writeData(cpu.dataView.getUint16(30, true) +\r\n            ((opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)), cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x1800) {\r\n        /* SUB, 0001 10rd dddd rrrr */\r\n        const val1 = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const val2 = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        const R = val1 - val2;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= (val1 ^ val2) & (val1 ^ R) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= val2 > val1 ? 1 : 0;\r\n        sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xf000) === 0x5000) {\r\n        /* SUBI, 0101 KKKK dddd KKKK */\r\n        const val1 = cpu.data[((opcode & 0xf0) >> 4) + 16];\r\n        const val2 = (opcode & 0xf) | ((opcode & 0xf00) >> 4);\r\n        const R = val1 - val2;\r\n        cpu.data[((opcode & 0xf0) >> 4) + 16] = R;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= (val1 ^ val2) & (val1 ^ R) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= val2 > val1 ? 1 : 0;\r\n        sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9402) {\r\n        /* SWAP, 1001 010d dddd 0010 */\r\n        const d = (opcode & 0x1f0) >> 4;\r\n        const i = cpu.data[d];\r\n        cpu.data[d] = ((15 & i) << 4) | ((240 & i) >>> 4);\r\n    }\r\n    else if (opcode === 0x95a8) {\r\n        /* WDR, 1001 0101 1010 1000 */\r\n        /* not implemented */\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9204) {\r\n        /* XCH, 1001 001r rrrr 0100 */\r\n        const r = (opcode & 0x1f0) >> 4;\r\n        const val1 = cpu.data[r];\r\n        const val2 = cpu.data[cpu.dataView.getUint16(30, true)];\r\n        cpu.data[cpu.dataView.getUint16(30, true)] = val1;\r\n        cpu.data[r] = val2;\r\n    }\r\n    cpu.pc = (cpu.pc + 1) % cpu.progMem.length;\r\n    cpu.cycles++;\r\n}\r\n","/**\r\n * AVR-8 Interrupt Handling\r\n * Part of AVR8js\r\n * Reference: http://ww1.microchip.com/downloads/en/devicedoc/atmel-0856-avr-instruction-set-manual.pdf\r\n *\r\n * Copyright (C) 2019, Uri Shaked\r\n */\r\nexport function avrInterrupt(cpu, addr) {\r\n    const sp = cpu.dataView.getUint16(93, true);\r\n    cpu.data[sp] = cpu.pc & 0xff;\r\n    cpu.data[sp - 1] = (cpu.pc >> 8) & 0xff;\r\n    cpu.dataView.setUint16(93, sp - 2, true);\r\n    cpu.data[95] &= 0x7f; // clear global interrupt flag\r\n    cpu.cycles += 2;\r\n    cpu.pc = addr;\r\n}\r\n","/**\r\n * AVR-8 Timers\r\n * Part of AVR8js\r\n * Reference: http://ww1.microchip.com/downloads/en/DeviceDoc/ATmega48A-PA-88A-PA-168A-PA-328-P-DS-DS40002061A.pdf\r\n *\r\n * Copyright (C) 2019, 2020, Uri Shaked\r\n */\r\nimport { avrInterrupt } from '../cpu/interrupt';\r\nconst timer01Dividers = {\r\n    0: 0,\r\n    1: 1,\r\n    2: 8,\r\n    3: 64,\r\n    4: 256,\r\n    5: 1024,\r\n    6: 0,\r\n    7: 0,\r\n};\r\nconst TOV = 1;\r\nconst OCFA = 2;\r\nconst OCFB = 4;\r\nconst TOIE = 1;\r\nconst OCIEA = 2;\r\nconst OCIEB = 4;\r\nexport const timer0Config = {\r\n    bits: 8,\r\n    captureInterrupt: 0,\r\n    compAInterrupt: 0x1c,\r\n    compBInterrupt: 0x1e,\r\n    ovfInterrupt: 0x20,\r\n    TIFR: 0x35,\r\n    OCRA: 0x47,\r\n    OCRB: 0x48,\r\n    ICR: 0,\r\n    TCNT: 0x46,\r\n    TCCRA: 0x44,\r\n    TCCRB: 0x45,\r\n    TCCRC: 0,\r\n    TIMSK: 0x6e,\r\n    dividers: timer01Dividers,\r\n};\r\nexport const timer1Config = {\r\n    bits: 16,\r\n    captureInterrupt: 0x14,\r\n    compAInterrupt: 0x16,\r\n    compBInterrupt: 0x18,\r\n    ovfInterrupt: 0x1a,\r\n    TIFR: 0x36,\r\n    OCRA: 0x88,\r\n    OCRB: 0x8a,\r\n    ICR: 0x86,\r\n    TCNT: 0x84,\r\n    TCCRA: 0x80,\r\n    TCCRB: 0x81,\r\n    TCCRC: 0x82,\r\n    TIMSK: 0x6f,\r\n    dividers: timer01Dividers,\r\n};\r\nexport const timer2Config = {\r\n    bits: 8,\r\n    captureInterrupt: 0,\r\n    compAInterrupt: 0x0e,\r\n    compBInterrupt: 0x10,\r\n    ovfInterrupt: 0x12,\r\n    TIFR: 0x37,\r\n    OCRA: 0xb3,\r\n    OCRB: 0xb4,\r\n    ICR: 0,\r\n    TCNT: 0xb2,\r\n    TCCRA: 0xb0,\r\n    TCCRB: 0xb1,\r\n    TCCRC: 0,\r\n    TIMSK: 0x70,\r\n    dividers: {\r\n        0: 1,\r\n        1: 1,\r\n        2: 8,\r\n        3: 32,\r\n        4: 64,\r\n        5: 128,\r\n        6: 256,\r\n        7: 1024,\r\n    },\r\n};\r\n/* All the following types and constants are related to WGM (Waveform Generation Mode) bits: */\r\nvar TimerMode;\r\n(function (TimerMode) {\r\n    TimerMode[TimerMode[\"Normal\"] = 0] = \"Normal\";\r\n    TimerMode[TimerMode[\"PWMPhaseCorrect\"] = 1] = \"PWMPhaseCorrect\";\r\n    TimerMode[TimerMode[\"CTC\"] = 2] = \"CTC\";\r\n    TimerMode[TimerMode[\"FastPWM\"] = 3] = \"FastPWM\";\r\n    TimerMode[TimerMode[\"PWMPhaseFrequencyCorrect\"] = 4] = \"PWMPhaseFrequencyCorrect\";\r\n    TimerMode[TimerMode[\"Reserved\"] = 5] = \"Reserved\";\r\n})(TimerMode || (TimerMode = {}));\r\nvar TOVUpdateMode;\r\n(function (TOVUpdateMode) {\r\n    TOVUpdateMode[TOVUpdateMode[\"Max\"] = 0] = \"Max\";\r\n    TOVUpdateMode[TOVUpdateMode[\"Top\"] = 1] = \"Top\";\r\n    TOVUpdateMode[TOVUpdateMode[\"Bottom\"] = 2] = \"Bottom\";\r\n})(TOVUpdateMode || (TOVUpdateMode = {}));\r\nvar OCRUpdateMode;\r\n(function (OCRUpdateMode) {\r\n    OCRUpdateMode[OCRUpdateMode[\"Immediate\"] = 0] = \"Immediate\";\r\n    OCRUpdateMode[OCRUpdateMode[\"Top\"] = 1] = \"Top\";\r\n    OCRUpdateMode[OCRUpdateMode[\"Bottom\"] = 2] = \"Bottom\";\r\n})(OCRUpdateMode || (OCRUpdateMode = {}));\r\nconst TopOCRA = 1;\r\nconst TopICR = 2;\r\nconst wgmModes8Bit = [\r\n    /*0*/ [TimerMode.Normal, 0xff, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n    /*1*/ [TimerMode.PWMPhaseCorrect, 0xff, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n    /*2*/ [TimerMode.CTC, TopOCRA, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n    /*3*/ [TimerMode.FastPWM, 0xff, OCRUpdateMode.Bottom, TOVUpdateMode.Max],\r\n    /*4*/ [TimerMode.Reserved, 0xff, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n    /*5*/ [TimerMode.PWMPhaseCorrect, TopOCRA, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n    /*6*/ [TimerMode.Reserved, 0xff, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n    /*7*/ [TimerMode.FastPWM, TopOCRA, OCRUpdateMode.Bottom, TOVUpdateMode.Top],\r\n];\r\n// Table 16-4 in the datasheet\r\nconst wgmModes16Bit = [\r\n    /*0 */ [TimerMode.Normal, 0xffff, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n    /*1 */ [TimerMode.PWMPhaseCorrect, 0x00ff, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n    /*2 */ [TimerMode.PWMPhaseCorrect, 0x01ff, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n    /*3 */ [TimerMode.PWMPhaseCorrect, 0x03ff, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n    /*4 */ [TimerMode.CTC, TopOCRA, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n    /*5 */ [TimerMode.FastPWM, 0x00ff, OCRUpdateMode.Bottom, TOVUpdateMode.Top],\r\n    /*6 */ [TimerMode.FastPWM, 0x01ff, OCRUpdateMode.Bottom, TOVUpdateMode.Top],\r\n    /*7 */ [TimerMode.FastPWM, 0x03ff, OCRUpdateMode.Bottom, TOVUpdateMode.Top],\r\n    /*8 */ [TimerMode.PWMPhaseFrequencyCorrect, TopICR, OCRUpdateMode.Bottom, TOVUpdateMode.Bottom],\r\n    /*9 */ [TimerMode.PWMPhaseFrequencyCorrect, TopOCRA, OCRUpdateMode.Bottom, TOVUpdateMode.Bottom],\r\n    /*10*/ [TimerMode.PWMPhaseCorrect, TopICR, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n    /*11*/ [TimerMode.PWMPhaseCorrect, TopOCRA, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n    /*12*/ [TimerMode.CTC, TopICR, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n    /*13*/ [TimerMode.Reserved, 0xffff, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n    /*14*/ [TimerMode.FastPWM, TopICR, OCRUpdateMode.Bottom, TOVUpdateMode.Top],\r\n    /*15*/ [TimerMode.FastPWM, TopOCRA, OCRUpdateMode.Bottom, TOVUpdateMode.Top],\r\n];\r\nexport class AVRTimer {\r\n    constructor(cpu, config) {\r\n        this.cpu = cpu;\r\n        this.config = config;\r\n        this.lastCycle = 0;\r\n        this.ocrA = 0;\r\n        this.ocrB = 0;\r\n        this.tcnt = 0;\r\n        this.tcntUpdated = false;\r\n        this.updateWGMConfig();\r\n        this.cpu.readHooks[config.TCNT] = (addr) => {\r\n            this.tick();\r\n            if (this.config.bits === 16) {\r\n                this.cpu.data[addr + 1] = this.tcnt >> 8;\r\n            }\r\n            return (this.cpu.data[addr] = this.tcnt & 0xff);\r\n        };\r\n        this.cpu.writeHooks[config.TCNT] = (value) => {\r\n            const highByte = this.config.bits === 16 ? this.cpu.data[config.TCNT + 1] : 0;\r\n            this.tcnt = (highByte << 8) | value;\r\n            this.tcntUpdated = true;\r\n            this.timerUpdated();\r\n        };\r\n        this.registerHook(config.OCRA, (value) => {\r\n            // TODO implement buffering when timer running in PWM mode\r\n            this.ocrA = value;\r\n        });\r\n        this.registerHook(config.OCRB, (value) => {\r\n            this.ocrB = value;\r\n        });\r\n        cpu.writeHooks[config.TCCRA] = (value) => {\r\n            this.cpu.data[config.TCCRA] = value;\r\n            this.updateWGMConfig();\r\n            return true;\r\n        };\r\n        cpu.writeHooks[config.TCCRB] = (value) => {\r\n            this.cpu.data[config.TCCRB] = value;\r\n            this.updateWGMConfig();\r\n            return true;\r\n        };\r\n    }\r\n    reset() {\r\n        this.lastCycle = 0;\r\n        this.ocrA = 0;\r\n        this.ocrB = 0;\r\n    }\r\n    get TIFR() {\r\n        return this.cpu.data[this.config.TIFR];\r\n    }\r\n    set TIFR(value) {\r\n        this.cpu.data[this.config.TIFR] = value;\r\n    }\r\n    get TCCRA() {\r\n        return this.cpu.data[this.config.TCCRA];\r\n    }\r\n    get TCCRB() {\r\n        return this.cpu.data[this.config.TCCRB];\r\n    }\r\n    get TIMSK() {\r\n        return this.cpu.data[this.config.TIMSK];\r\n    }\r\n    get ICR() {\r\n        // Only available for 16-bit timers\r\n        return (this.cpu.data[this.config.ICR + 1] << 8) | this.cpu.data[this.config.ICR];\r\n    }\r\n    get CS() {\r\n        return (this.TCCRB & 0x7);\r\n    }\r\n    get WGM() {\r\n        const mask = this.config.bits === 16 ? 0x18 : 0x8;\r\n        return ((this.TCCRB & mask) >> 1) | (this.TCCRA & 0x3);\r\n    }\r\n    get TOP() {\r\n        switch (this.topValue) {\r\n            case TopOCRA:\r\n                return this.ocrA;\r\n            case TopICR:\r\n                return this.ICR;\r\n            default:\r\n                return this.topValue;\r\n        }\r\n    }\r\n    registerHook(address, hook) {\r\n        if (this.config.bits === 16) {\r\n            this.cpu.writeHooks[address] = (value) => hook((this.cpu.data[address + 1] << 8) | value);\r\n            this.cpu.writeHooks[address + 1] = (value) => hook((value << 8) | this.cpu.data[address]);\r\n        }\r\n        else {\r\n            this.cpu.writeHooks[address] = hook;\r\n        }\r\n    }\r\n    updateWGMConfig() {\r\n        const wgmModes = this.config.bits === 16 ? wgmModes16Bit : wgmModes8Bit;\r\n        const [timerMode, topValue] = wgmModes[this.WGM];\r\n        this.timerMode = timerMode;\r\n        this.topValue = topValue;\r\n    }\r\n    tick() {\r\n        const divider = this.config.dividers[this.CS];\r\n        const delta = this.cpu.cycles - this.lastCycle;\r\n        if (divider && delta >= divider) {\r\n            const counterDelta = Math.floor(delta / divider);\r\n            this.lastCycle += counterDelta * divider;\r\n            const val = this.tcnt;\r\n            const newVal = (val + counterDelta) % (this.TOP + 1);\r\n            // A CPU write overrides (has priority over) all counter clear or count operations.\r\n            if (!this.tcntUpdated) {\r\n                this.tcnt = newVal;\r\n                this.timerUpdated();\r\n            }\r\n            const { timerMode } = this;\r\n            if ((timerMode === TimerMode.Normal ||\r\n                timerMode === TimerMode.PWMPhaseCorrect ||\r\n                timerMode === TimerMode.PWMPhaseFrequencyCorrect ||\r\n                timerMode === TimerMode.FastPWM) &&\r\n                val > newVal) {\r\n                this.TIFR |= TOV;\r\n            }\r\n        }\r\n        this.tcntUpdated = false;\r\n        if (this.cpu.interruptsEnabled) {\r\n            if (this.TIFR & TOV && this.TIMSK & TOIE) {\r\n                avrInterrupt(this.cpu, this.config.ovfInterrupt);\r\n                this.TIFR &= ~TOV;\r\n            }\r\n            if (this.TIFR & OCFA && this.TIMSK & OCIEA) {\r\n                avrInterrupt(this.cpu, this.config.compAInterrupt);\r\n                this.TIFR &= ~OCFA;\r\n            }\r\n            if (this.TIFR & OCFB && this.TIMSK & OCIEB) {\r\n                avrInterrupt(this.cpu, this.config.compBInterrupt);\r\n                this.TIFR &= ~OCFB;\r\n            }\r\n        }\r\n    }\r\n    timerUpdated() {\r\n        const value = this.tcnt;\r\n        if (this.ocrA && value === this.ocrA) {\r\n            this.TIFR |= OCFA;\r\n            if (this.timerMode === TimerMode.CTC) {\r\n                // Clear Timer on Compare Match (CTC) Mode\r\n                this.tcnt = 0;\r\n                this.TIFR |= TOV;\r\n            }\r\n        }\r\n        if (this.ocrB && value === this.ocrB) {\r\n            this.TIFR |= OCFB;\r\n        }\r\n    }\r\n}\r\n","export const portAConfig = {\r\n    PIN: 0x20,\r\n    DDR: 0x21,\r\n    PORT: 0x22,\r\n};\r\nexport const portBConfig = {\r\n    PIN: 0x23,\r\n    DDR: 0x24,\r\n    PORT: 0x25,\r\n};\r\nexport const portCConfig = {\r\n    PIN: 0x26,\r\n    DDR: 0x27,\r\n    PORT: 0x28,\r\n};\r\nexport const portDConfig = {\r\n    PIN: 0x29,\r\n    DDR: 0x2a,\r\n    PORT: 0x2b,\r\n};\r\nexport const portEConfig = {\r\n    PIN: 0x2c,\r\n    DDR: 0x2d,\r\n    PORT: 0x2e,\r\n};\r\nexport const portFConfig = {\r\n    PIN: 0x2f,\r\n    DDR: 0x30,\r\n    PORT: 0x31,\r\n};\r\nexport const portGConfig = {\r\n    PIN: 0x32,\r\n    DDR: 0x33,\r\n    PORT: 0x34,\r\n};\r\nexport const portHConfig = {\r\n    PIN: 0x100,\r\n    DDR: 0x101,\r\n    PORT: 0x102,\r\n};\r\nexport const portJConfig = {\r\n    PIN: 0x103,\r\n    DDR: 0x104,\r\n    PORT: 0x105,\r\n};\r\nexport const portKConfig = {\r\n    PIN: 0x106,\r\n    DDR: 0x107,\r\n    PORT: 0x108,\r\n};\r\nexport const portLConfig = {\r\n    PIN: 0x109,\r\n    DDR: 0x10a,\r\n    PORT: 0x10b,\r\n};\r\nexport var PinState;\r\n(function (PinState) {\r\n    PinState[PinState[\"Low\"] = 0] = \"Low\";\r\n    PinState[PinState[\"High\"] = 1] = \"High\";\r\n    PinState[PinState[\"Input\"] = 2] = \"Input\";\r\n    PinState[PinState[\"InputPullUp\"] = 3] = \"InputPullUp\";\r\n})(PinState || (PinState = {}));\r\nexport class AVRIOPort {\r\n    constructor(cpu, portConfig) {\r\n        this.cpu = cpu;\r\n        this.portConfig = portConfig;\r\n        this.listeners = [];\r\n        cpu.writeHooks[portConfig.DDR] = (value, oldValue) => {\r\n            const portValue = cpu.data[portConfig.PORT];\r\n            this.writeGpio(value & portValue, oldValue & oldValue);\r\n        };\r\n        cpu.writeHooks[portConfig.PORT] = (value, oldValue) => {\r\n            const ddrMask = cpu.data[portConfig.DDR];\r\n            cpu.data[portConfig.PORT] = value;\r\n            value &= ddrMask;\r\n            cpu.data[portConfig.PIN] = (cpu.data[portConfig.PIN] & ~ddrMask) | value;\r\n            this.writeGpio(value, oldValue & ddrMask);\r\n            return true;\r\n        };\r\n        cpu.writeHooks[portConfig.PIN] = (value) => {\r\n            // Writing to 1 PIN toggles PORT bits\r\n            const oldPortValue = cpu.data[portConfig.PORT];\r\n            const ddrMask = cpu.data[portConfig.DDR];\r\n            const portValue = oldPortValue ^ value;\r\n            cpu.data[portConfig.PORT] = portValue;\r\n            cpu.data[portConfig.PIN] = (cpu.data[portConfig.PIN] & ~ddrMask) | (portValue & ddrMask);\r\n            this.writeGpio(portValue & ddrMask, oldPortValue & ddrMask);\r\n            return true;\r\n        };\r\n    }\r\n    addListener(listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n    removeListener(listener) {\r\n        this.listeners = this.listeners.filter((l) => l !== listener);\r\n    }\r\n    /**\r\n     * Get the state of a given GPIO pin\r\n     *\r\n     * @param index Pin index to return from 0 to 7\r\n     * @returns PinState.Low or PinState.High if the pin is set to output, PinState.Input if the pin is set\r\n     *   to input, and PinState.InputPullUp if the pin is set to input and the internal pull-up resistor has\r\n     *   been enabled.\r\n     */\r\n    pinState(index) {\r\n        const ddr = this.cpu.data[this.portConfig.DDR];\r\n        const port = this.cpu.data[this.portConfig.PORT];\r\n        const bitMask = 1 << index;\r\n        if (ddr & bitMask) {\r\n            return port & bitMask ? PinState.High : PinState.Low;\r\n        }\r\n        else {\r\n            return port & bitMask ? PinState.InputPullUp : PinState.Input;\r\n        }\r\n    }\r\n    writeGpio(value, oldValue) {\r\n        for (const listener of this.listeners) {\r\n            listener(value, oldValue);\r\n        }\r\n    }\r\n}\r\n","import { avrInterrupt } from '../cpu/interrupt';\r\nexport const usart0Config = {\r\n    rxCompleteInterrupt: 0x24,\r\n    dataRegisterEmptyInterrupt: 0x26,\r\n    txCompleteInterrupt: 0x28,\r\n    UCSRA: 0xc0,\r\n    UCSRB: 0xc1,\r\n    UCSRC: 0xc2,\r\n    UBRRL: 0xc4,\r\n    UBRRH: 0xc5,\r\n    UDR: 0xc6,\r\n};\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// Register bits:\r\nconst UCSRA_RXC = 0x80; // USART Receive Complete\r\nconst UCSRA_TXC = 0x40; // USART Transmit Complete\r\nconst UCSRA_UDRE = 0x20; // USART Data Register Empty\r\nconst UCSRA_FE = 0x10; // Frame Error\r\nconst UCSRA_DOR = 0x8; // Data OverRun\r\nconst UCSRA_UPE = 0x4; // USART Parity Error\r\nconst UCSRA_U2X = 0x2; // Double the USART Transmission Speed\r\nconst UCSRA_MPCM = 0x1; // Multi-processor Communication Mode\r\nconst UCSRB_RXCIE = 0x80; // RX Complete Interrupt Enable\r\nconst UCSRB_TXCIE = 0x40; // TX Complete Interrupt Enable\r\nconst UCSRB_UDRIE = 0x20; // USART Data Register Empty Interrupt Enable\r\nconst UCSRB_RXEN = 0x10; // Receiver Enable\r\nconst UCSRB_TXEN = 0x8; // Transmitter Enable\r\nconst UCSRB_UCSZ2 = 0x4; // Character Size 2\r\nconst UCSRB_RXB8 = 0x2; // Receive Data Bit 8\r\nconst UCSRB_TXB8 = 0x1; // Transmit Data Bit 8\r\nconst UCSRC_UMSEL1 = 0x80; // USART Mode Select 1\r\nconst UCSRC_UMSEL0 = 0x40; // USART Mode Select 0\r\nconst UCSRC_UPM1 = 0x20; // Parity Mode 1\r\nconst UCSRC_UPM0 = 0x10; // Parity Mode 0\r\nconst UCSRC_USBS = 0x8; // Stop Bit Select\r\nconst UCSRC_UCSZ1 = 0x4; // Character Size 1\r\nconst UCSRC_UCSZ0 = 0x2; // Character Size 0\r\nconst UCSRC_UCPOL = 0x1; // Clock Polarity\r\n/* eslint-enable @typescript-eslint/no-unused-vars */\r\nexport class AVRUSART {\r\n    constructor(cpu, config, freqMHz) {\r\n        this.cpu = cpu;\r\n        this.config = config;\r\n        this.freqMHz = freqMHz;\r\n        this.onByteTransmit = null;\r\n        this.onLineTransmit = null;\r\n        this.lineBuffer = '';\r\n        this.cpu.writeHooks[config.UCSRA] = (value) => {\r\n            this.cpu.data[config.UCSRA] = value | UCSRA_UDRE | UCSRA_TXC;\r\n            return true;\r\n        };\r\n        this.cpu.writeHooks[config.UCSRB] = (value, oldValue) => {\r\n            if (value & UCSRB_TXEN && !(oldValue & UCSRB_TXEN)) {\r\n                // Enabling the transmission - mark UDR as empty\r\n                this.cpu.data[config.UCSRA] |= UCSRA_UDRE;\r\n            }\r\n        };\r\n        this.cpu.writeHooks[config.UDR] = (value) => {\r\n            if (this.onByteTransmit) {\r\n                this.onByteTransmit(value);\r\n            }\r\n            if (this.onLineTransmit) {\r\n                const ch = String.fromCharCode(value);\r\n                if (ch === '\\n') {\r\n                    this.onLineTransmit(this.lineBuffer);\r\n                    this.lineBuffer = '';\r\n                }\r\n                else {\r\n                    this.lineBuffer += ch;\r\n                }\r\n            }\r\n            this.cpu.data[config.UCSRA] |= UCSRA_UDRE | UCSRA_TXC;\r\n        };\r\n    }\r\n    tick() {\r\n        if (this.cpu.interruptsEnabled) {\r\n            const ucsra = this.cpu.data[this.config.UCSRA];\r\n            const ucsrb = this.cpu.data[this.config.UCSRB];\r\n            if (ucsra & UCSRA_UDRE && ucsrb & UCSRB_UDRIE) {\r\n                avrInterrupt(this.cpu, this.config.dataRegisterEmptyInterrupt);\r\n                this.cpu.data[this.config.UCSRA] &= ~UCSRA_UDRE;\r\n            }\r\n            if (ucsrb & UCSRA_TXC && ucsrb & UCSRB_TXCIE) {\r\n                avrInterrupt(this.cpu, this.config.txCompleteInterrupt);\r\n                this.cpu.data[this.config.UCSRA] &= ~UCSRA_TXC;\r\n            }\r\n        }\r\n    }\r\n    get baudRate() {\r\n        const UBRR = (this.cpu.data[this.config.UBRRH] << 8) | this.cpu.data[this.config.UBRRL];\r\n        const multiplier = this.cpu.data[this.config.UCSRA] & UCSRA_U2X ? 8 : 16;\r\n        return Math.floor(this.freqMHz / (multiplier * (1 + UBRR)));\r\n    }\r\n    get bitsPerChar() {\r\n        const ucsz = ((this.cpu.data[this.config.UCSRA] & (UCSRC_UCSZ1 | UCSRC_UCSZ0)) >> 1) |\r\n            (this.cpu.data[this.config.UCSRB] & UCSRB_UCSZ2);\r\n        switch (ucsz) {\r\n            case 0:\r\n                return 5;\r\n            case 1:\r\n                return 6;\r\n            case 2:\r\n                return 7;\r\n            case 3:\r\n                return 8;\r\n            default: // 4..6 are reserved\r\n            case 7:\r\n                return 9;\r\n        }\r\n    }\r\n}\r\n","import { avrInterrupt } from '../cpu/interrupt';\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// Register bits:\r\nconst TWCR_TWINT = 0x80; // TWI Interrupt Flag\r\nconst TWCR_TWEA = 0x40; // TWI Enable Acknowledge Bit\r\nconst TWCR_TWSTA = 0x20; // TWI START Condition Bit\r\nconst TWCR_TWSTO = 0x10; // TWI STOP Condition Bit\r\nconst TWCR_TWWC = 0x8; //TWI Write Collision Flag\r\nconst TWCR_TWEN = 0x4; //  TWI Enable Bit\r\nconst TWCR_TWIE = 0x1; // TWI Interrupt Enable\r\nconst TWSR_TWS_MASK = 0xf8; // TWI Status\r\nconst TWSR_TWPS1 = 0x2; // TWI Prescaler Bits\r\nconst TWSR_TWPS0 = 0x1; // TWI Prescaler Bits\r\nconst TWSR_TWPS_MASK = TWSR_TWPS1 | TWSR_TWPS0; // TWI Prescaler mask\r\nconst TWAR_TWA_MASK = 0xfe; //  TWI (Slave) Address Register\r\nconst TWAR_TWGCE = 0x1; // TWI General Call Recognition Enable Bit\r\nconst STATUS_BUS_ERROR = 0x0;\r\nconst STATUS_TWI_IDLE = 0xf8;\r\n// Master states\r\nconst STATUS_START = 0x08;\r\nconst STATUS_REPEATED_START = 0x10;\r\nconst STATUS_SLAW_ACK = 0x18;\r\nconst STATUS_SLAW_NACK = 0x20;\r\nconst STATUS_DATA_SENT_ACK = 0x28;\r\nconst STATUS_DATA_SENT_NACK = 0x30;\r\nconst STATUS_DATA_LOST_ARBITRATION = 0x38;\r\nconst STATUS_SLAR_ACK = 0x40;\r\nconst STATUS_SLAR_NACK = 0x48;\r\nconst STATUS_DATA_RECEIVED_ACK = 0x50;\r\nconst STATUS_DATA_RECEIVED_NACK = 0x58;\r\n// TODO: add slave states\r\n/* eslint-enable @typescript-eslint/no-unused-vars */\r\nexport const twiConfig = {\r\n    twiInterrupt: 0x30,\r\n    TWBR: 0xb8,\r\n    TWSR: 0xb9,\r\n    TWAR: 0xba,\r\n    TWDR: 0xbb,\r\n    TWCR: 0xbc,\r\n    TWAMR: 0xbd,\r\n};\r\n// A simple TWI Event Handler that sends a NACK for all events\r\nexport class NoopTWIEventHandler {\r\n    constructor(twi) {\r\n        this.twi = twi;\r\n    }\r\n    start() {\r\n        this.twi.completeStart();\r\n    }\r\n    stop() {\r\n        this.twi.completeStop();\r\n    }\r\n    connectToSlave() {\r\n        this.twi.completeConnect(false);\r\n    }\r\n    writeByte() {\r\n        this.twi.completeWrite(false);\r\n    }\r\n    readByte() {\r\n        this.twi.completeRead(0xff);\r\n    }\r\n}\r\nexport class AVRTWI {\r\n    constructor(cpu, config, freqMHz) {\r\n        this.cpu = cpu;\r\n        this.config = config;\r\n        this.freqMHz = freqMHz;\r\n        this.eventHandler = new NoopTWIEventHandler(this);\r\n        this.nextTick = null;\r\n        this.updateStatus(STATUS_TWI_IDLE);\r\n        this.cpu.writeHooks[config.TWCR] = (value) => {\r\n            const clearInt = value & TWCR_TWINT;\r\n            if (clearInt) {\r\n                value &= ~TWCR_TWINT;\r\n            }\r\n            const { status } = this;\r\n            if (clearInt && value & TWCR_TWEN) {\r\n                const twdrValue = this.cpu.data[this.config.TWDR];\r\n                this.nextTick = () => {\r\n                    if (value & TWCR_TWSTA) {\r\n                        this.eventHandler.start(status !== STATUS_TWI_IDLE);\r\n                    }\r\n                    else if (value & TWCR_TWSTO) {\r\n                        this.eventHandler.stop();\r\n                    }\r\n                    else if (status === STATUS_START) {\r\n                        this.eventHandler.connectToSlave(twdrValue >> 1, twdrValue & 0x1 ? false : true);\r\n                    }\r\n                    else if (status === STATUS_SLAW_ACK || status === STATUS_DATA_SENT_ACK) {\r\n                        this.eventHandler.writeByte(twdrValue);\r\n                    }\r\n                    else if (status === STATUS_SLAR_ACK || status === STATUS_DATA_RECEIVED_ACK) {\r\n                        const ack = !!(value & TWCR_TWEA);\r\n                        this.eventHandler.readByte(ack);\r\n                    }\r\n                };\r\n                this.cpu.data[config.TWCR] = value;\r\n                return true;\r\n            }\r\n        };\r\n    }\r\n    tick() {\r\n        if (this.nextTick) {\r\n            this.nextTick();\r\n            this.nextTick = null;\r\n        }\r\n        if (this.cpu.interruptsEnabled) {\r\n            const { TWCR, twiInterrupt } = this.config;\r\n            if (this.cpu.data[TWCR] & TWCR_TWIE && this.cpu.data[TWCR] & TWCR_TWINT) {\r\n                avrInterrupt(this.cpu, twiInterrupt);\r\n                this.cpu.data[TWCR] &= ~TWCR_TWINT;\r\n            }\r\n        }\r\n    }\r\n    get prescaler() {\r\n        switch (this.cpu.data[this.config.TWSR] & TWSR_TWPS_MASK) {\r\n            case 0:\r\n                return 1;\r\n            case 1:\r\n                return 4;\r\n            case 2:\r\n                return 16;\r\n            case 3:\r\n                return 64;\r\n        }\r\n        // We should never get here:\r\n        throw new Error('Invalid prescaler value!');\r\n    }\r\n    get sclFrequency() {\r\n        return this.freqMHz / (16 + 2 * this.cpu.data[this.config.TWBR] * this.prescaler);\r\n    }\r\n    completeStart() {\r\n        this.updateStatus(this.status === STATUS_TWI_IDLE ? STATUS_START : STATUS_REPEATED_START);\r\n    }\r\n    completeStop() {\r\n        this.cpu.data[this.config.TWCR] &= ~TWCR_TWSTO;\r\n        this.updateStatus(STATUS_TWI_IDLE);\r\n    }\r\n    completeConnect(ack) {\r\n        if (this.cpu.data[this.config.TWDR] & 0x1) {\r\n            this.updateStatus(ack ? STATUS_SLAR_ACK : STATUS_SLAR_NACK);\r\n        }\r\n        else {\r\n            this.updateStatus(ack ? STATUS_SLAW_ACK : STATUS_SLAW_NACK);\r\n        }\r\n    }\r\n    completeWrite(ack) {\r\n        this.updateStatus(ack ? STATUS_DATA_SENT_ACK : STATUS_DATA_SENT_NACK);\r\n    }\r\n    completeRead(value) {\r\n        const ack = !!(this.cpu.data[this.config.TWCR] & TWCR_TWEA);\r\n        this.cpu.data[this.config.TWDR] = value;\r\n        this.updateStatus(ack ? STATUS_DATA_RECEIVED_ACK : STATUS_DATA_RECEIVED_NACK);\r\n    }\r\n    get status() {\r\n        return this.cpu.data[this.config.TWSR] & TWSR_TWS_MASK;\r\n    }\r\n    updateStatus(value) {\r\n        const { TWCR, TWSR } = this.config;\r\n        this.cpu.data[TWSR] = (this.cpu.data[TWSR] & ~TWSR_TWS_MASK) | value;\r\n        this.cpu.data[TWCR] |= TWCR_TWINT;\r\n    }\r\n}\r\n","/**\r\n * AVR8js\r\n *\r\n * Copyright (C) 2019, 2020, Uri Shaked\r\n */\r\nexport { CPU } from './cpu/cpu';\r\nexport { avrInstruction } from './cpu/instruction';\r\nexport { avrInterrupt } from './cpu/interrupt';\r\nexport { AVRTimer, timer0Config, timer1Config, timer2Config } from './peripherals/timer';\r\nexport { AVRIOPort, portAConfig, portBConfig, portCConfig, portDConfig, portEConfig, portFConfig, portGConfig, portHConfig, portJConfig, portKConfig, portLConfig, PinState, } from './peripherals/gpio';\r\nexport { AVRUSART, usart0Config } from './peripherals/usart';\r\nexport * from './peripherals/twi';\r\n","/**\n * Minimal Intel HEX loader\n * Part of AVR8js\n *\n * Copyright (C) 2019, Uri Shaked\n */\n\nexport function loadHex(source: string, target: Uint8Array) {\n  for (const line of source.split('\\n')) {\n    if (line[0] === ':' && line.substr(7, 2) === '00') {\n      const bytes = parseInt(line.substr(1, 2), 16);\n      const addr = parseInt(line.substr(3, 4), 16);\n      for (let i = 0; i < bytes; i++) {\n        target[addr + i] = parseInt(line.substr(9 + i * 2, 2), 16);\n      }\n    }\n  }\n}","// Faster setTimeout(fn, 0) implementation using postMessage API\n// Based on https://dbaron.org/log/20100309-faster-timeouts\nexport type IMicroTaskCallback = () => void;\n\nexport class MicroTaskScheduler {\n  readonly messageName = 'zero-timeout-message';\n\n  private executionQueue: Array<IMicroTaskCallback> = [];\n  private stopped = true;\n\n  start() {\n    if (this.stopped) {\n      this.stopped = false;\n      window.addEventListener('message', this.handleMessage, true);\n    }\n  }\n\n  stop() {\n    this.stopped = true;\n    window.removeEventListener('message', this.handleMessage, true);\n  }\n\n  postTask(fn: IMicroTaskCallback) {\n    if (!this.stopped) {\n      this.executionQueue.push(fn);\n      window.postMessage(this.messageName, '*');\n    }\n  }\n\n  private handleMessage = (event: MessageEvent) => {\n    if (event.data === this.messageName) {\n      event.stopPropagation();\n      const executeJob = this.executionQueue.shift();\n      if (executeJob !== undefined) {\n        executeJob();\n      }\n    }\n  };\n}","import {\n  avrInstruction,\n  AVRTimer,\n  CPU,\n  timer0Config,\n  timer1Config,\n  AVRIOPort,\n  AVRUSART,\n  portBConfig,\n  portCConfig,\n  portDConfig,\n  usart0Config\n} from 'avr8js';\nimport { loadHex } from './intelhex';\nimport { MicroTaskScheduler } from './task-scheduler';\ntype Event = {\n  period : number,  //milliseconds\n  eventCall : any\n}\n\n// ATmega328p params\nconst FLASH = 0x8000;\n\nexport class AVRRunner {\n  readonly program = new Uint16Array(FLASH);\n  readonly cpu: CPU;\n  readonly timer0: AVRTimer;\n  readonly timer1: AVRTimer;\n  readonly portB: AVRIOPort;\n  readonly portC: AVRIOPort;\n  readonly portD: AVRIOPort;\n  readonly usart: AVRUSART;\n  readonly speed = 16e6; // 16 MHZ\n  readonly workUnitCycles = 500000;\n  readonly taskScheduler = new MicroTaskScheduler();\n\n\n  //events\n  private cpuEvents : Event[] = [];\n  private cpuEventsMicrosecond : Event[] = [];\n\n  constructor(hex: string) {\n    loadHex(hex, new Uint8Array(this.program.buffer));\n    this.cpu = new CPU(this.program);\n    this.timer0 = new AVRTimer(this.cpu, timer0Config);\n    this.timer1 = new AVRTimer(this.cpu, timer1Config);\n    this.portB = new AVRIOPort(this.cpu, portBConfig);\n    this.portC = new AVRIOPort(this.cpu, portCConfig);\n    this.portD = new AVRIOPort(this.cpu, portDConfig);\n    this.usart = new AVRUSART(this.cpu, usart0Config, this.speed);\n    this.taskScheduler.start();\n  }\n\n  private cpuTimeMS = 0;\n  private cpuTimeMicroS = 0;\n\n  // CPU main loop\n  execute(callback: (cpu: CPU) => void) {\n    const cyclesToRun = this.cpu.cycles + this.workUnitCycles;\n    while (this.cpu.cycles < cyclesToRun) {\n      avrInstruction(this.cpu);\n      this.timer0.tick();\n      this.timer1.tick();\n      this.usart.tick();\n\n\n      if(Math.floor(this.cpu.cycles*1000/this.speed) !== this.cpuTimeMS)\n      {\n          this.cpuTimeMS = Math.floor(this.cpu.cycles*1000/this.speed);\n          \n          for(const event of this.cpuEvents)\n          {\n\n              if(Math.floor(this.cpu.cycles*1000/this.speed) % event.period === 0) //events by ms\n              { \n                  event.eventCall(this.cpu.cycles);\n\n              }   \n          }\n      }\n\n      if(Math.floor(this.cpu.cycles*1000000/this.speed) !== this.cpuTimeMicroS)\n      {\n          this.cpuTimeMicroS = Math.floor(this.cpu.cycles*1000000/this.speed);\n\n\n          for(const event of this.cpuEventsMicrosecond)\n          {\n              \n              if(Math.floor(this.cpu.cycles*1000000/this.speed) % event.period === 0) \n              { \n                //console.log(Math.floor(this.cpu.cycles*1000000/this.speed));\n            \n                  event.eventCall(this.cpu.cycles);\n\n              }   \n          }\n      }\n    \n    }\n\n    callback(this.cpu);\n    this.taskScheduler.postTask(() => this.execute(callback));\n  }\n\n  stop() {\n    this.taskScheduler.stop();\n  }\n\n\n  addCPUEvent(cpuEvent : Event)\n  {\n      this.cpuEvents.push(cpuEvent);\n  }\n\n  addCPUEventMicrosecond(cpuEvent : Event)\n  {\n      this.cpuEventsMicrosecond.push(cpuEvent);\n  }\n}","import { ICPU } from 'avr8js';\n\nexport class CPUPerformance {\n  private prevTime = 0;\n  private prevCycles = 0;\n  private samples = new Float32Array(64);\n  private sampleIndex = 0;\n\n  constructor(private cpu: ICPU, private MHZ: number) {}\n\n  reset() {\n    this.prevTime = 0;\n    this.prevCycles = 0;\n    this.sampleIndex = 0;\n  }\n\n  update() {\n    if (this.prevTime) {\n      const delta = performance.now() - this.prevTime;\n      const deltaCycles = this.cpu.cycles - this.prevCycles;\n      const deltaCpuMillis = 1000 * (deltaCycles / this.MHZ);\n      const factor = deltaCpuMillis / delta;\n      if (!this.sampleIndex) {\n        this.samples.fill(factor);\n      }\n      this.samples[this.sampleIndex++ % this.samples.length] = factor;\n    }\n    this.prevCycles = this.cpu.cycles;\n    this.prevTime = performance.now();\n    const avg = this.samples.reduce((x, y) => x + y) / this.samples.length;\n    return avg;\n  }\n}","function zeroPad(value: number, length: number) {\n  let sval = value.toString();\n  while (sval.length < length) {\n    sval = '0' + sval;\n  }\n  return sval;\n}\n\nexport function formatTime(seconds: number) {\n  const ms = Math.floor(seconds * 1000) % 1000;\n  const secs = Math.floor(seconds % 60);\n  const mins = Math.floor(seconds / 60);\n  return `${zeroPad(mins, 2)}:${zeroPad(secs, 2)}.${zeroPad(ms, 3)}`;\n}\n\nexport function getMilliSecconds(seconds: number){\n  const ms = Math.floor(seconds * 10000) % 10000;\n  return ms/10;\n}\n\nexport function getMicroSeconds(seconds : number){\n  return Math.floor(seconds * 1000000) % 1000000;\n}","import { AVRRunner } from './execute';\nimport { CPUPerformance } from './cpu-performance';\nimport {Component} from \"../Component\";\nimport {formatTime} from \"./format-time\"\nimport { portDConfig, portBConfig } from \"avr8js\";\n\ntype Event = {\n    period : number,  //milliseconds\n    eventCall : any\n}\ntype DigitalPinConnection = {\n    pin : number,\n    component : Component\n}\nexport class ArduinoUno{\n    private runner: AVRRunner | null = null;\n    private cpuEvents : Event[] = [];\n    private cpuEventsMicrosecond : Event[] = [];\n    private pinConnections : DigitalPinConnection[] = [];\n    private serialOutput : string = \"\";\n    private serialOutputElement : Element | null = null;\n    private timeLabelElement : Element | null = null;\n\n\n    setSerialOutputElement(serialOutputElement : Element) : void\n    {\n        this.serialOutputElement = serialOutputElement;\n    }\n    setTimeLabelElement(timeLabelElement : Element) : void\n    {\n        this.timeLabelElement = timeLabelElement;\n    }\n    getSerialOutput() : string { return this.serialOutput;}\n\n    addConnection(pin : number, component : Component) : boolean\n    {\n        const connection : DigitalPinConnection = { pin : pin, component : component};\n\n        //TODO can we allow multiple components to be connected to the same pin?\n        /*for(const connection of this.digitalPinConnections)\n        {\n            if(connection.pin === pin)\n                return false;\n        }*/\n    \n        this.pinConnections.push(connection);\n        return true;\n    }\n\n    addCPUEvent(period: number, eventCall: any)\n    {\n        const cpuEvent : Event = { period: period, eventCall: eventCall};\n        this.cpuEvents.push(cpuEvent);\n        this.runner?.addCPUEvent(cpuEvent);\n    }\n\n    addCPUEventMicrosecond(period: number, eventCall: any)\n    {\n        const cpuEvent : Event = { period: period, eventCall: eventCall};\n        this.cpuEventsMicrosecond.push(cpuEvent);\n        this.runner?.addCPUEventMicrosecond(cpuEvent);\n    }\n\n    private updateComponents(value: number, startPin: number, cpuCycles: number) : void {\n        for (const connection of this.pinConnections) {\n          const pin = connection.pin;\n          if (pin >= startPin && pin <= startPin + 8) {\n            connection.component.update(value & (1 << (pin - startPin)) ? true : false, cpuCycles);\n          }\n        }\n      }\n    executeProgram(hex: string) {\n        this.runner = new AVRRunner(hex);\n        const MHZ = 16000000;\n      \n        for(const event of this.cpuEventsMicrosecond)\n            this.runner.addCPUEventMicrosecond(event);\n        for(const event of this.cpuEvents)\n            this.runner.addCPUEvent(event);\n        \n        for(const connection of this.pinConnections)\n            connection.component.reset();\n\n        this.runner.portD.addListener(value => {\n            \n            this.updateComponents(value, 0, this.runner.cpu.cycles);\n        });\n        this.runner.portB.addListener(value => {\n            this.updateComponents(value, 8, this.runner.cpu.cycles);\n        });\n    \n        this.runner.usart.onByteTransmit = (value) => {\n            this.serialOutput += String.fromCharCode(value);\n            if(this.serialOutputElement)\n                this.serialOutputElement.textContent += String.fromCharCode(value);\n\n        };\n\n    \n        const cpuPerf = new CPUPerformance(this.runner.cpu, MHZ);\n    \n        this.runner.execute((cpu) => {\n           \n                const time = formatTime(cpu.cycles / MHZ);\n                const speed = (cpuPerf.update() * 100).toFixed(0);\n                if(this.timeLabelElement)\n                    this.timeLabelElement.textContent = `Simulation time: ${time} (${speed}%)`;\n\n        });\n    }\n\n    stopExecute()\n    {\n        this.runner?.stop();\n        this.runner = null;\n    }\n\n    writeDigitalPin(pin: number, pinState: boolean) : boolean\n    {\n        let portConfig = portDConfig.PIN;\n        let pinIndex = 0;\n\n        if(pin > 0 && pin < 8)\n        {\n            portConfig = portDConfig.PIN;\n            pinIndex = pin;\n        }\n        else if(pin < 13)\n        { \n           portConfig = portBConfig.PIN;\n           pinIndex = pin - 8;\n        }\n        else\n            return false;\n\n        if(this.runner)\n        {\n            if(!pinState)\n                this.runner.cpu.data[portConfig] &= ~(1 << pinIndex);\n            else\n                this.runner.cpu.data[portConfig] |= 1 << pinIndex;\n\n            return true;\n        }\n\n        return false;\n    }\n\n}\n\n","export abstract class Component{\n    \n    protected label : string;\n    protected pin :  number;\n    protected pinState : boolean;\n    \n\n    constructor(pin : number, label: string) \n    {\n        this.pin = pin;\n        this.label = label;\n        this.pinState = false;\n\n    }\n\n    getLabel() : string { return this.label;}\n    getPin() : number {return this.pin};\n    getPinState() : boolean { return this.pinState;}\n    \n    abstract update(pinState : boolean, cpuCycles : number) : void;\n    abstract reset() : void;\n}","import {Component} from \"./Component\";\nimport {getMilliSecconds} from \"./Uno/format-time\";\n\nconst MHZ = 16000000;\n\nexport class Servo extends Component{\n    \n\n    \n    widthOfLastPulse : number;\n    startingCpuCyclesOfPulse : number;\n\n    constructor(pin : number, label = \"Servo\") \n    {\n        super(pin, label);\n        this.widthOfLastPulse = 1.4;\n        this.startingCpuCyclesOfPulse = -1;\n    }\n\n    getWidthOfLastPulse() : number { return this.widthOfLastPulse;}\n\n    update(pinState : boolean, cpuCycles : number)\n    {\n        if(pinState)\n        {\n            if(!this.pinState)   //if we are LOW \n            {\n               this.startingCpuCyclesOfPulse = cpuCycles;\n            }\n        }\n        else\n        {\n            if(this.pinState)\n            {\n                this.widthOfLastPulse = getMilliSecconds((cpuCycles - this.startingCpuCyclesOfPulse)/MHZ);\n            }\n        }\n        this.pinState = pinState;\n        \n    }\n\n    reset() \n    {\n        this.widthOfLastPulse = 1.4;\n        this.startingCpuCyclesOfPulse = -1;\n    }\n}","import {Component} from \"./Component\";\nimport {getMilliSecconds, getMicroSeconds} from \"./Uno/format-time\";\n\nconst MHZ = 16000000;\nconst maxDistance = 300;\n\nexport class UltrasonicSensor extends Component{\n    \n    private echoPin : number;\n    private echoPinState : boolean;\n    \n    private isTriggered : boolean = false;\n    private startingTimeOfTrigger : number = 0;\n\n    private startingTimeOfEcho : number = 0;\n    private startingCpuCyclesOfPulse : number = -1;\n    private distanceOfObstacle : number = maxDistance;\n\n    constructor(triggerPin : number, echoPin: number, label = \"UltrasonicSensor\") \n    {\n        super(triggerPin, label);\n        this.echoPin = echoPin;\n        this.echoPinState = false;\n    }\n\n\n    setDistanceOfObstacle(distance : number) : void { this.distanceOfObstacle = distance;}\n    getEchoPin() : number { return this.echoPin;}\n\n    update(pinState : boolean, cpuCycles : number)\n    {\n        if(pinState)\n        {\n            if(!this.pinState)   //if we are LOW \n            {\n               this.startingCpuCyclesOfPulse = cpuCycles;\n            }\n        }\n        else\n        {\n            if(this.pinState)\n            {\n                const widthOfLastPulse = getMicroSeconds((cpuCycles - this.startingCpuCyclesOfPulse)/MHZ);\n                if(widthOfLastPulse >= 10 && widthOfLastPulse <= 20) //10 micros to triger the echo + 10 error\n                {\n                    if(!this.echoPinState)\n                    {\n                        this.isTriggered = true;\n                        this.startingTimeOfTrigger = Math.floor(cpuCycles*1000000/MHZ);\n                    }\n                }\n            }\n        }\n        this.pinState = pinState;\n\n    }\n\n    getEchoPinState(cpuCycles : number) \n    {\n       \n        if(this.echoPinState)\n        {\n            const targetDuration = this.distanceOfObstacle*2/0.0343;\n            const pulseDuration = Math.floor(cpuCycles*1000000/MHZ) - this.startingTimeOfEcho;\n\n            if(pulseDuration >= targetDuration)    //flip the trigger down \n            {\n                this.echoPinState = false;\n            }\n        }\n        else\n        {\n            if(this.isTriggered && Math.floor(cpuCycles*1000000/MHZ) > this.startingTimeOfTrigger + 14) \n            //wait few milliseconds after the trigger for the echos to be sent\n            //which gives enough time for pulseIn to get called, as it waits for the moment it turns HIGH\n            //if the flip is immidiate, pulseIn will keep on waiting for the pin to go LOW and then HIGH or until it times out\n            {\n                this.echoPinState = true;\n                this.startingTimeOfEcho = Math.floor(cpuCycles*1000000/MHZ);\n                this.isTriggered = false;\n            }\n        }\n\n        return this.echoPinState;\n\n    }\n\n    reset()\n    {\n        this.echoPinState = false;\n        this.isTriggered = false;\n        this.startingTimeOfTrigger  = 0;\n\n        this.startingTimeOfEcho = 0;\n        this.startingCpuCyclesOfPulse = -1;\n        \n    }\n}","export {ArduinoUno} from \"./Uno/ArduinoUno\";\nexport {Servo} from \"./Servo\";\nexport {UltrasonicSensor} from \"./UltrasonicSensor\";\n\n","import {TwoWheelRobot} from \"../robots/TwoWheelRobot\";\nimport {ArduinoUno, Servo, UltrasonicSensor} from \"../Hardware\";\n\n\nexport class TwoServoRobot {\n\n    public arduino : ArduinoUno | null = null;\n    public servoLeft : Servo = new Servo(9, \"leftServo\");\n    public servoRight : Servo = new Servo(10, \"rightServo\");\n    public ultrasonic : UltrasonicSensor = new UltrasonicSensor(11, 12);\n    public environment : TwoWheelRobot | null = null;\n    \n    \n    \n    constructor(canvas:any, serialOutputElement : any, timeLabelElement : any) {\n        this.environment = new TwoWheelRobot(canvas);\n        this.arduino = new ArduinoUno();\n        this.arduino.setSerialOutputElement(serialOutputElement);\n        this.arduino.setTimeLabelElement(timeLabelElement)\n\n        //connect the servos\n        this.arduino.addConnection(9, this.servoLeft);\n        this.arduino.addConnection(10, this.servoRight);\n        this.arduino.addConnection(11, this.ultrasonic);\n\n        //add arduino events\n        //update the wheel speeds from servo components\n        this.arduino.addCPUEvent(5, () => {\n            const leftServoSpeed = (this.servoLeft.getWidthOfLastPulse() - 1.4)/5;\n            const rightServoSpeed = (this.servoRight.getWidthOfLastPulse() - 1.4)/5;\n            this.environment?.setSpeeds(leftServoSpeed, rightServoSpeed);\n        })\n        \n        //apply the force on the wheels\n        this.arduino.addCPUEvent(100, () => {\n            this.environment?.applyForces();\n        })\n        this.arduino.addCPUEvent(100, () => {\n            this.environment?.tick(100);\n        })\n        this.arduino.addCPUEventMicrosecond(5, (cpuCycles : number) => {\n            if(this.environment)\n                this.ultrasonic.setDistanceOfObstacle(this.environment.ultrasonicSensorDistance);\n            this.arduino?.writeDigitalPin(this.ultrasonic.getEchoPin(), this.ultrasonic.getEchoPinState(cpuCycles));\n        })\n\n        /* \n        this.arduino.addCPUEvent(1000, () =>{\n           console.log(this.environment?.rightWheelSpeed, this.environment?.leftWheelSpeed);\n        })\n        */\n    }\n\n    run(hex: string)\n    {\n        this.environment?.reset();\n        this.environment?.tick(100);\n        this.arduino?.executeProgram(hex);\n    }\n    \n    stop()\n    {\n        this.arduino?.stopExecute();\n        this.servoLeft.widthOfLastPulse = 1.4;\n        this.servoRight.widthOfLastPulse = 1.4;\n    }\n}","const url = 'https://hexi.wokwi.com';\n\nexport interface HexiResult {\n  stdout: string;\n  stderr: string;\n  hex: string;\n}\n\nexport async function buildHex(source: string) {\n  const resp = await fetch(url + '/build', {\n    method: 'POST',\n    mode: 'cors',\n    cache: 'no-cache',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ sketch: source })\n  });\n  return (await resp.json()) as HexiResult;\n}","import { TwoServoRobot } from \"./ArduinoRobotEnvironment/TwoServoRobot\";\nimport { buildHex } from './compile';\nimport './index.css';\n\n\nlet editor: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n// Load Editor\ndeclare const window: any; // eslint-disable-line @typescript-eslint/no-explicit-any\ndeclare const monaco: any; // eslint-disable-line @typescript-eslint/no-explicit-any\nwindow.require.config({\n  paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.20.0/min/vs' }\n});\nwindow.require(['vs/editor/editor.main'], () => {\n  editor = monaco.editor.create(document.querySelector('.code-editor'), {\n    value: `#include <Servo.h>\n\nServo leftservo;  \nServo rightservo;  \n\nconst int pingPin = 11; // Trigger Pin of Ultrasonic Sensor\nconst int echoPin = 12; // Echo Pin of Ultrasonic Sensor\n\nvoid setup() {\n  Serial.begin(115200);\n  leftservo.attach(9);  \n  rightservo.attach(10);\n  \n  pinMode(pingPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n}\n\nvoid loop() {\n\n  printDistance();\n\n  //move forward fast\n  leftservo.write(170);\n  rightservo.write(170);\n  delay(3000);\n\n  printDistance();\n  //rotate right fast\n  leftservo.write(170);\n  rightservo.write(10);\n  delay(3000);\n\n  printDistance();\n  //rotate left slowly\n  leftservo.write(90);\n  rightservo.write(120);\n  delay(3000);\n  \n  printDistance();\n  //move backward very slowly\n  leftservo.write(75);\n  rightservo.write(75);\n  delay(3000);\n\n\n}\n\nvoid printDistance()\n{\n  long duration, inches, cm;\n  digitalWrite(pingPin, LOW);\n  delayMicroseconds(2);\n  digitalWrite(pingPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(pingPin, LOW);\n  duration = pulseIn(echoPin, HIGH);\n  inches = microsecondsToInches(duration);\n  cm = microsecondsToCentimeters(duration);\n  Serial.print(inches);\n  Serial.print(\"in, \");\n  Serial.print(cm);\n  Serial.print(\"cm\");\n  Serial.println();\n\n}\nlong microsecondsToInches(long microseconds) {\n  return microseconds / 74 / 2;\n}\n\nlong microsecondsToCentimeters(long microseconds) {\n  return microseconds / 29 / 2;\n}\n    \n`,\n    language: 'cpp',\n    minimap: { enabled: false }\n  });\n});\n\n\n\nconst statusLabel = document.querySelector('#status-label');\nconst compilerOutputText = document.querySelector('#compiler-output-text');\nconst serialOutputText = document.querySelector('#serial-output-text');\n\n\n//set up robot environment\nconst canvas = document.getElementById('world');\n\nconst robot = new TwoServoRobot(canvas, serialOutputText, statusLabel); \n\nrobot.environment?.addObstacleRectangle(400, 50, 800, 20, \"DarkRed\", \"topwall\");   \n\n\n\nconst runButton = document.querySelector('#run-button');\nrunButton?.addEventListener('click', compileAndRun);\nconst stopButton = document.querySelector('#stop-button');\nstopButton?.addEventListener('click', stopCode);\n\n\n\nasync function compileAndRun() {\n  \n\n  runButton?.setAttribute('disabled', '1');\n\n  serialOutputText.textContent = '';\n  try {\n    statusLabel.textContent = 'Compiling...';\n    const result = await buildHex(editor.getModel().getValue());\n    compilerOutputText.textContent = result.stderr || result.stdout;\n    if (result.hex) {\n      compilerOutputText.textContent += '\\nSimulation Started...';\n      stopButton.removeAttribute('disabled');\n      \n      robot.run(result.hex);\n      //executeProgram(result.hex);\n    } else {\n      runButton.removeAttribute('disabled');\n    }\n } catch (err) {\n    runButton.removeAttribute('disabled');\n    alert('Failed: ' + err);\n  } finally {\n    statusLabel.textContent = '';\n  }\n}\n\n\n\nfunction stopCode() {\n  stopButton.setAttribute('disabled', '1');\n  runButton.removeAttribute('disabled');\n  robot.stop();\n  /*if (robot.arduino) {\n    runner.stop();\n    runner = null;\n    leftMotorSpeed = 0;\n    rightMotorSpeed = 0;\n    \n  }*/\n}\n\n\n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var bundle = require('./bundle-url');\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    link.remove();\n  };\n  newLink.href = link.href.split('?')[0] + '?' + Date.now();\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nmodule.exports = reloadCSS;\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}