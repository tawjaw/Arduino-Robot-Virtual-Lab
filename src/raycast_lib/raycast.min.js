"use strict";function _defineProperties(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function _instanceof(t,e){return null!=e&&"undefined"!=typeof Symbol&&e[Symbol.hasInstance]?!!e[Symbol.hasInstance](t):t instanceof e}function _classCallCheck(t,e){if(!_instanceof(t,e))throw new TypeError("Cannot call a class as a function")}function raycast(t,e,n){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];e=vec2.fromOther(e),n=vec2.fromOther(n);for(var i=Matter.Query.ray(t,e,n),s=[],a=new ray(e,n),o=i.length-1;o>=0;o--)for(var u=ray.bodyCollisions(a,i[o].body),l=u.length-1;l>=0;l--)s.push(u[l]);return r&&s.sort(function(t,n){return t.point.distance(e)-n.point.distance(e)}),s}var raycol=function t(e,n,r,i){_classCallCheck(this,t),this.body=e,this.point=n,this.normal=r,this.verts=i},ray=function(){function t(e,n){_classCallCheck(this,t),this.start=e,this.end=n}return _createClass(t,[{key:"yValueAt",value:function(t){return this.offsetY+this.slope*t}},{key:"xValueAt",value:function(t){return(t-this.offsetY)/this.slope}},{key:"pointInBounds",value:function(t){var e=Math.min(this.start.x,this.end.x),n=Math.max(this.start.x,this.end.x),r=Math.min(this.start.y,this.end.y),i=Math.max(this.start.y,this.end.y);return t.x>=e&&t.x<=n&&t.y>=r&&t.y<=i}},{key:"calculateNormal",value:function(t){var e=this.difference,n=e.normalized().rotate(Math.PI/2),r=e.normalized().rotate(Math.PI/-2);return this.start.plus(n).distance(t)<this.start.plus(r).distance(t)?n:r}},{key:"difference",get:function(){return this.end.minus(this.start)}},{key:"slope",get:function(){var t=this.difference;return t.y/t.x}},{key:"offsetY",get:function(){return this.start.y-this.slope*this.start.x}},{key:"isHorizontal",get:function(){return compareNum(this.start.y,this.end.y)}},{key:"isVertical",get:function(){return compareNum(this.start.x,this.end.x)}}],[{key:"intersect",value:function(t,e){if(t.isVertical&&e.isVertical)return null;if(t.isVertical)return new vec2(t.start.x,e.yValueAt(t.start.x));if(e.isVertical)return new vec2(e.start.x,t.yValueAt(e.start.x));if(compareNum(t.slope,e.slope))return null;if(t.isHorizontal)return new vec2(e.xValueAt(t.start.y),t.start.y);if(e.isHorizontal)return new vec2(t.xValueAt(e.start.y),e.start.y);var n=(e.offsetY-t.offsetY)/(t.slope-e.slope);return new vec2(n,t.yValueAt(n))}},{key:"collisionPoint",value:function(e,n){var r=t.intersect(e,n);return r&&e.pointInBounds(r)&&n.pointInBounds(r)?r:null}},{key:"bodyEdges",value:function(e){for(var n=[],r=e.parts.length-1;r>=0;r--)for(var i=e.parts[r].vertices.length-1;i>=0;i--){var s=i+1;s>=e.parts[r].vertices.length&&(s=0);var a=new t(vec2.fromOther(e.parts[r].vertices[i]),vec2.fromOther(e.parts[r].vertices[s]));a.verts=[e.parts[r].vertices[i],e.parts[r].vertices[s]],n.push(a)}return n}},{key:"bodyCollisions",value:function(e,n){for(var r=[],i=t.bodyEdges(n),s=i.length-1;s>=0;s--){var a=t.collisionPoint(e,i[s]);if(a){var o=i[s].calculateNormal(e.start);r.push(new raycol(n,a,o,i[s].verts))}}return r}}]),t}();function compareNum(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1e-5;return Math.abs(e-t)<=n}var vec2=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e;_classCallCheck(this,t),this.x=e,this.y=n}return _createClass(t,[{key:"normalized",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return this.multiply(t/this.distance())}},{key:"multiply",value:function(e){return new t(this.x*e,this.y*e)}},{key:"plus",value:function(e){return new t(this.x+e.x,this.y+e.y)}},{key:"minus",value:function(t){return this.plus(t.inverted)}},{key:"rotate",value:function(e){var n=this.direction,r=this.distance();return n+=e,t.fromAng(n,r)}},{key:"toPhysVector",value:function(){return Matter.Vector.create(this.x,this.y)}},{key:"distance",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new t;return Math.sqrt(Math.pow(this.x-e.x,2)+Math.pow(this.y-e.y,2))}},{key:"clone",value:function(){return new t(this.x,this.y)}},{key:"toString",value:function(){return"vector<"+this.x+", "+this.y+">"}},{key:"inverted",get:function(){return this.multiply(-1)}},{key:"direction",get:function(){return Math.atan2(this.y,this.x)}}],[{key:"fromAng",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return new t(Math.cos(e)*n,Math.sin(e)*n)}},{key:"fromOther",value:function(e){return new t(e.x,e.y)}}]),t}();